/*
 * generated by Xtext 2.12.0
 */
grammar InternalMarsRover;

options {
	superClass=AbstractInternalAntlrParser;
}

@lexer::header {
package org.xtext.robotFinal.parser.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.parser.antlr.Lexer;
}

@parser::header {
package org.xtext.robotFinal.parser.antlr.internal;

import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.common.util.Enumerator;
import org.eclipse.xtext.parser.antlr.AbstractInternalAntlrParser;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.parser.antlr.AntlrDatatypeRuleToken;
import org.xtext.robotFinal.services.MarsRoverGrammarAccess;

}

@parser::members {

 	private MarsRoverGrammarAccess grammarAccess;

    public InternalMarsRoverParser(TokenStream input, MarsRoverGrammarAccess grammarAccess) {
        this(input);
        this.grammarAccess = grammarAccess;
        registerRules(grammarAccess.getGrammar());
    }

    @Override
    protected String getFirstRuleName() {
    	return "Robot";
   	}

   	@Override
   	protected MarsRoverGrammarAccess getGrammarAccess() {
   		return grammarAccess;
   	}

}

@rulecatch {
    catch (RecognitionException re) {
        recover(input,re);
        appendSkippedTokens();
    }
}

// Entry rule entryRuleRobot
entryRuleRobot returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getRobotRule()); }
	iv_ruleRobot=ruleRobot
	{ $current=$iv_ruleRobot.current; }
	EOF;

// Rule Robot
ruleRobot returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='Robot'
		{
			newLeafNode(otherlv_0, grammarAccess.getRobotAccess().getRobotKeyword_0());
		}
		(
			(
				lv_name_1_0=RULE_STRING
				{
					newLeafNode(lv_name_1_0, grammarAccess.getRobotAccess().getNameSTRINGTerminalRuleCall_1_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getRobotRule());
					}
					setWithLastConsumed(
						$current,
						"name",
						lv_name_1_0,
						"org.eclipse.xtext.common.Terminals.STRING");
				}
			)
		)
		otherlv_2='slave_address'
		{
			newLeafNode(otherlv_2, grammarAccess.getRobotAccess().getSlave_addressKeyword_2());
		}
		(
			(
				lv_slave_address_3_0=RULE_STRING
				{
					newLeafNode(lv_slave_address_3_0, grammarAccess.getRobotAccess().getSlave_addressSTRINGTerminalRuleCall_3_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getRobotRule());
					}
					setWithLastConsumed(
						$current,
						"slave_address",
						lv_slave_address_3_0,
						"org.eclipse.xtext.common.Terminals.STRING");
				}
			)
		)
		otherlv_4='drive_speed'
		{
			newLeafNode(otherlv_4, grammarAccess.getRobotAccess().getDrive_speedKeyword_4());
		}
		(
			(
				lv_drive_speed_5_0=RULE_INT
				{
					newLeafNode(lv_drive_speed_5_0, grammarAccess.getRobotAccess().getDrive_speedINTTerminalRuleCall_5_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getRobotRule());
					}
					setWithLastConsumed(
						$current,
						"drive_speed",
						lv_drive_speed_5_0,
						"org.eclipse.xtext.common.Terminals.INT");
				}
			)
		)
		otherlv_6='special_speed'
		{
			newLeafNode(otherlv_6, grammarAccess.getRobotAccess().getSpecial_speedKeyword_6());
		}
		(
			(
				lv_special_speed_7_0=RULE_INT
				{
					newLeafNode(lv_special_speed_7_0, grammarAccess.getRobotAccess().getSpecial_speedINTTerminalRuleCall_7_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getRobotRule());
					}
					setWithLastConsumed(
						$current,
						"special_speed",
						lv_special_speed_7_0,
						"org.eclipse.xtext.common.Terminals.INT");
				}
			)
		)
		otherlv_8='missions'
		{
			newLeafNode(otherlv_8, grammarAccess.getRobotAccess().getMissionsKeyword_8());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getRobotAccess().getMissionsMissionParserRuleCall_9_0());
				}
				lv_missions_9_0=rulemission
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getRobotRule());
					}
					add(
						$current,
						"missions",
						lv_missions_9_0,
						"org.xtext.robotFinal.MarsRover.mission");
					afterParserOrEnumRuleCall();
				}
			)
		)*
	)
;

// Entry rule entryRulemission
entryRulemission returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getMissionRule()); }
	iv_rulemission=rulemission
	{ $current=$iv_rulemission.current; }
	EOF;

// Rule mission
rulemission returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='mission'
		{
			newLeafNode(otherlv_0, grammarAccess.getMissionAccess().getMissionKeyword_0());
		}
		(
			(
				lv_name_1_0=RULE_STRING
				{
					newLeafNode(lv_name_1_0, grammarAccess.getMissionAccess().getNameSTRINGTerminalRuleCall_1_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getMissionRule());
					}
					setWithLastConsumed(
						$current,
						"name",
						lv_name_1_0,
						"org.eclipse.xtext.common.Terminals.STRING");
				}
			)
		)
		otherlv_2='type'
		{
			newLeafNode(otherlv_2, grammarAccess.getMissionAccess().getTypeKeyword_2());
		}
		(
			(
				(
					{
						newCompositeNode(grammarAccess.getMissionAccess().getTypeAvoid_obstaclesParserRuleCall_3_0_0());
					}
					lv_type_3_1=ruleavoid_obstacles
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getMissionRule());
						}
						set(
							$current,
							"type",
							lv_type_3_1,
							"org.xtext.robotFinal.MarsRover.avoid_obstacles");
						afterParserOrEnumRuleCall();
					}
					    |
					{
						newCompositeNode(grammarAccess.getMissionAccess().getTypeDetect_lakesParserRuleCall_3_0_1());
					}
					lv_type_3_2=ruledetect_lakes
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getMissionRule());
						}
						set(
							$current,
							"type",
							lv_type_3_2,
							"org.xtext.robotFinal.MarsRover.detect_lakes");
						afterParserOrEnumRuleCall();
					}
					    |
					{
						newCompositeNode(grammarAccess.getMissionAccess().getTypeAvoid_lakesParserRuleCall_3_0_2());
					}
					lv_type_3_3=ruleavoid_lakes
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getMissionRule());
						}
						set(
							$current,
							"type",
							lv_type_3_3,
							"org.xtext.robotFinal.MarsRover.avoid_lakes");
						afterParserOrEnumRuleCall();
					}
					    |
					{
						newCompositeNode(grammarAccess.getMissionAccess().getTypePush_obstaclesParserRuleCall_3_0_3());
					}
					lv_type_3_4=rulepush_obstacles
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getMissionRule());
						}
						set(
							$current,
							"type",
							lv_type_3_4,
							"org.xtext.robotFinal.MarsRover.push_obstacles");
						afterParserOrEnumRuleCall();
					}
					    |
					{
						newCompositeNode(grammarAccess.getMissionAccess().getTypeDetect_rocksParserRuleCall_3_0_4());
					}
					lv_type_3_5=ruledetect_rocks
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getMissionRule());
						}
						set(
							$current,
							"type",
							lv_type_3_5,
							"org.xtext.robotFinal.MarsRover.detect_rocks");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)
	)
;

// Entry rule entryRuleavoid_obstacles
entryRuleavoid_obstacles returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getAvoid_obstaclesRule()); }
	iv_ruleavoid_obstacles=ruleavoid_obstacles
	{ $current=$iv_ruleavoid_obstacles.current; }
	EOF;

// Rule avoid_obstacles
ruleavoid_obstacles returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				lv_name_0_0='avoid_obstacles'
				{
					newLeafNode(lv_name_0_0, grammarAccess.getAvoid_obstaclesAccess().getNameAvoid_obstaclesKeyword_0_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getAvoid_obstaclesRule());
					}
					setWithLastConsumed($current, "name", lv_name_0_0, "avoid_obstacles");
				}
			)
		)
		otherlv_1='sensors'
		{
			newLeafNode(otherlv_1, grammarAccess.getAvoid_obstaclesAccess().getSensorsKeyword_1());
		}
		(
			(
				(
					{
						newCompositeNode(grammarAccess.getAvoid_obstaclesAccess().getSensorsUltraParserRuleCall_2_0_0());
					}
					lv_sensors_2_1=ruleultra
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getAvoid_obstaclesRule());
						}
						add(
							$current,
							"sensors",
							lv_sensors_2_1,
							"org.xtext.robotFinal.MarsRover.ultra");
						afterParserOrEnumRuleCall();
					}
					    |
					{
						newCompositeNode(grammarAccess.getAvoid_obstaclesAccess().getSensorsBumpersParserRuleCall_2_0_1());
					}
					lv_sensors_2_2=rulebumpers
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getAvoid_obstaclesRule());
						}
						add(
							$current,
							"sensors",
							lv_sensors_2_2,
							"org.xtext.robotFinal.MarsRover.bumpers");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)*
	)
;

// Entry rule entryRuleultra
entryRuleultra returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getUltraRule()); }
	iv_ruleultra=ruleultra
	{ $current=$iv_ruleultra.current; }
	EOF;

// Rule ultra
ruleultra returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				lv_name_0_0='ultra'
				{
					newLeafNode(lv_name_0_0, grammarAccess.getUltraAccess().getNameUltraKeyword_0_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getUltraRule());
					}
					setWithLastConsumed($current, "name", lv_name_0_0, "ultra");
				}
			)
		)
		otherlv_1='distance'
		{
			newLeafNode(otherlv_1, grammarAccess.getUltraAccess().getDistanceKeyword_1());
		}
		(
			(
				lv_distance_2_0=RULE_INT
				{
					newLeafNode(lv_distance_2_0, grammarAccess.getUltraAccess().getDistanceINTTerminalRuleCall_2_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getUltraRule());
					}
					setWithLastConsumed(
						$current,
						"distance",
						lv_distance_2_0,
						"org.eclipse.xtext.common.Terminals.INT");
				}
			)
		)
	)
;

// Entry rule entryRulebumpers
entryRulebumpers returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getBumpersRule()); }
	iv_rulebumpers=rulebumpers
	{ $current=$iv_rulebumpers.current; }
	EOF;

// Rule bumpers
rulebumpers returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			lv_name_0_0='bumpers'
			{
				newLeafNode(lv_name_0_0, grammarAccess.getBumpersAccess().getNameBumpersKeyword_0());
			}
			{
				if ($current==null) {
					$current = createModelElement(grammarAccess.getBumpersRule());
				}
				setWithLastConsumed($current, "name", lv_name_0_0, "bumpers");
			}
		)
	)
;

// Entry rule entryRuledetect_lakes
entryRuledetect_lakes returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getDetect_lakesRule()); }
	iv_ruledetect_lakes=ruledetect_lakes
	{ $current=$iv_ruledetect_lakes.current; }
	EOF;

// Rule detect_lakes
ruledetect_lakes returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				lv_name_0_0='detect_lakes'
				{
					newLeafNode(lv_name_0_0, grammarAccess.getDetect_lakesAccess().getNameDetect_lakesKeyword_0_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getDetect_lakesRule());
					}
					setWithLastConsumed($current, "name", lv_name_0_0, "detect_lakes");
				}
			)
		)
		otherlv_1='number_of_lakes'
		{
			newLeafNode(otherlv_1, grammarAccess.getDetect_lakesAccess().getNumber_of_lakesKeyword_1());
		}
		(
			(
				lv_number_of_lakes_2_0=RULE_INT
				{
					newLeafNode(lv_number_of_lakes_2_0, grammarAccess.getDetect_lakesAccess().getNumber_of_lakesINTTerminalRuleCall_2_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getDetect_lakesRule());
					}
					setWithLastConsumed(
						$current,
						"number_of_lakes",
						lv_number_of_lakes_2_0,
						"org.eclipse.xtext.common.Terminals.INT");
				}
			)
		)
		otherlv_3='lakes_colors'
		{
			newLeafNode(otherlv_3, grammarAccess.getDetect_lakesAccess().getLakes_colorsKeyword_3());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getDetect_lakesAccess().getLakes_colorsColorEnumRuleCall_4_0());
				}
				lv_lakes_colors_4_0=ruleColor
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getDetect_lakesRule());
					}
					add(
						$current,
						"lakes_colors",
						lv_lakes_colors_4_0,
						"org.xtext.robotFinal.MarsRover.Color");
					afterParserOrEnumRuleCall();
				}
			)
		)*
		otherlv_5='after_examinating'
		{
			newLeafNode(otherlv_5, grammarAccess.getDetect_lakesAccess().getAfter_examinatingKeyword_5());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getDetect_lakesAccess().getAfter_examinatingAfter_actionParserRuleCall_6_0());
				}
				lv_after_examinating_6_0=ruleafter_action
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getDetect_lakesRule());
					}
					set(
						$current,
						"after_examinating",
						lv_after_examinating_6_0,
						"org.xtext.robotFinal.MarsRover.after_action");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRuledetect_rocks
entryRuledetect_rocks returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getDetect_rocksRule()); }
	iv_ruledetect_rocks=ruledetect_rocks
	{ $current=$iv_ruledetect_rocks.current; }
	EOF;

// Rule detect_rocks
ruledetect_rocks returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				lv_name_0_0='detect_rocks'
				{
					newLeafNode(lv_name_0_0, grammarAccess.getDetect_rocksAccess().getNameDetect_rocksKeyword_0_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getDetect_rocksRule());
					}
					setWithLastConsumed($current, "name", lv_name_0_0, "detect_rocks");
				}
			)
		)
		otherlv_1='number_of_rocks'
		{
			newLeafNode(otherlv_1, grammarAccess.getDetect_rocksAccess().getNumber_of_rocksKeyword_1());
		}
		(
			(
				lv_number_of_rocks_2_0=RULE_INT
				{
					newLeafNode(lv_number_of_rocks_2_0, grammarAccess.getDetect_rocksAccess().getNumber_of_rocksINTTerminalRuleCall_2_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getDetect_rocksRule());
					}
					setWithLastConsumed(
						$current,
						"number_of_rocks",
						lv_number_of_rocks_2_0,
						"org.eclipse.xtext.common.Terminals.INT");
				}
			)
		)
		otherlv_3='after_examinating'
		{
			newLeafNode(otherlv_3, grammarAccess.getDetect_rocksAccess().getAfter_examinatingKeyword_3());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getDetect_rocksAccess().getAfter_examinatingAfter_actionParserRuleCall_4_0());
				}
				lv_after_examinating_4_0=ruleafter_action
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getDetect_rocksRule());
					}
					set(
						$current,
						"after_examinating",
						lv_after_examinating_4_0,
						"org.xtext.robotFinal.MarsRover.after_action");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRulepush_obstacles
entryRulepush_obstacles returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getPush_obstaclesRule()); }
	iv_rulepush_obstacles=rulepush_obstacles
	{ $current=$iv_rulepush_obstacles.current; }
	EOF;

// Rule push_obstacles
rulepush_obstacles returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			lv_name_0_0='push_obstacles'
			{
				newLeafNode(lv_name_0_0, grammarAccess.getPush_obstaclesAccess().getNamePush_obstaclesKeyword_0());
			}
			{
				if ($current==null) {
					$current = createModelElement(grammarAccess.getPush_obstaclesRule());
				}
				setWithLastConsumed($current, "name", lv_name_0_0, "push_obstacles");
			}
		)
	)
;

// Entry rule entryRuleafter_action
entryRuleafter_action returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getAfter_actionRule()); }
	iv_ruleafter_action=ruleafter_action
	{ $current=$iv_ruleafter_action.current; }
	EOF;

// Rule after_action
ruleafter_action returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				(
					lv_action_0_1='stop'
					{
						newLeafNode(lv_action_0_1, grammarAccess.getAfter_actionAccess().getActionStopKeyword_0_0_0());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getAfter_actionRule());
						}
						setWithLastConsumed($current, "action", lv_action_0_1, null);
					}
					    |
					lv_action_0_2='continue'
					{
						newLeafNode(lv_action_0_2, grammarAccess.getAfter_actionAccess().getActionContinueKeyword_0_0_1());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getAfter_actionRule());
						}
						setWithLastConsumed($current, "action", lv_action_0_2, null);
					}
				)
			)
		)
		(
			otherlv_1='indicate'
			{
				newLeafNode(otherlv_1, grammarAccess.getAfter_actionAccess().getIndicateKeyword_1_0());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getAfter_actionAccess().getIndicateIndicationParserRuleCall_1_1_0());
					}
					lv_indicate_2_0=ruleindication
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getAfter_actionRule());
						}
						add(
							$current,
							"indicate",
							lv_indicate_2_0,
							"org.xtext.robotFinal.MarsRover.indication");
						afterParserOrEnumRuleCall();
					}
				)
			)*
		)?
	)
;

// Entry rule entryRuleindication
entryRuleindication returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getIndicationRule()); }
	iv_ruleindication=ruleindication
	{ $current=$iv_ruleindication.current; }
	EOF;

// Rule indication
ruleindication returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				lv_name_0_0='with'
				{
					newLeafNode(lv_name_0_0, grammarAccess.getIndicationAccess().getNameWithKeyword_0_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getIndicationRule());
					}
					setWithLastConsumed($current, "name", lv_name_0_0, "with");
				}
			)
		)
		(
			(
				(
					{
						newCompositeNode(grammarAccess.getIndicationAccess().getTypeSoundParserRuleCall_1_0_0());
					}
					lv_type_1_1=rulesound
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getIndicationRule());
						}
						set(
							$current,
							"type",
							lv_type_1_1,
							"org.xtext.robotFinal.MarsRover.sound");
						afterParserOrEnumRuleCall();
					}
					    |
					{
						newCompositeNode(grammarAccess.getIndicationAccess().getTypeMessageParserRuleCall_1_0_1());
					}
					lv_type_1_2=rulemessage
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getIndicationRule());
						}
						set(
							$current,
							"type",
							lv_type_1_2,
							"org.xtext.robotFinal.MarsRover.message");
						afterParserOrEnumRuleCall();
					}
					    |
					{
						newCompositeNode(grammarAccess.getIndicationAccess().getTypeColor_indicationParserRuleCall_1_0_2());
					}
					lv_type_1_3=rulecolor_indication
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getIndicationRule());
						}
						set(
							$current,
							"type",
							lv_type_1_3,
							"org.xtext.robotFinal.MarsRover.color_indication");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)?
	)
;

// Entry rule entryRulesound
entryRulesound returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getSoundRule()); }
	iv_rulesound=rulesound
	{ $current=$iv_rulesound.current; }
	EOF;

// Rule sound
rulesound returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				lv_name_0_0='sound'
				{
					newLeafNode(lv_name_0_0, grammarAccess.getSoundAccess().getNameSoundKeyword_0_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getSoundRule());
					}
					setWithLastConsumed($current, "name", lv_name_0_0, "sound");
				}
			)
		)
		otherlv_1='duration'
		{
			newLeafNode(otherlv_1, grammarAccess.getSoundAccess().getDurationKeyword_1());
		}
		(
			(
				lv_duration_2_0=RULE_INT
				{
					newLeafNode(lv_duration_2_0, grammarAccess.getSoundAccess().getDurationINTTerminalRuleCall_2_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getSoundRule());
					}
					setWithLastConsumed(
						$current,
						"duration",
						lv_duration_2_0,
						"org.eclipse.xtext.common.Terminals.INT");
				}
			)
		)
		otherlv_3='frequency'
		{
			newLeafNode(otherlv_3, grammarAccess.getSoundAccess().getFrequencyKeyword_3());
		}
		(
			(
				lv_frequency_4_0=RULE_INT
				{
					newLeafNode(lv_frequency_4_0, grammarAccess.getSoundAccess().getFrequencyINTTerminalRuleCall_4_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getSoundRule());
					}
					setWithLastConsumed(
						$current,
						"frequency",
						lv_frequency_4_0,
						"org.eclipse.xtext.common.Terminals.INT");
				}
			)
		)
	)
;

// Entry rule entryRulemessage
entryRulemessage returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getMessageRule()); }
	iv_rulemessage=rulemessage
	{ $current=$iv_rulemessage.current; }
	EOF;

// Rule message
rulemessage returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				lv_name_0_0='message'
				{
					newLeafNode(lv_name_0_0, grammarAccess.getMessageAccess().getNameMessageKeyword_0_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getMessageRule());
					}
					setWithLastConsumed($current, "name", lv_name_0_0, "message");
				}
			)
		)
		(
			(
				lv_msg_1_0=RULE_STRING
				{
					newLeafNode(lv_msg_1_0, grammarAccess.getMessageAccess().getMsgSTRINGTerminalRuleCall_1_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getMessageRule());
					}
					setWithLastConsumed(
						$current,
						"msg",
						lv_msg_1_0,
						"org.eclipse.xtext.common.Terminals.STRING");
				}
			)
		)
	)
;

// Entry rule entryRulecolor_indication
entryRulecolor_indication returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getColor_indicationRule()); }
	iv_rulecolor_indication=rulecolor_indication
	{ $current=$iv_rulecolor_indication.current; }
	EOF;

// Rule color_indication
rulecolor_indication returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				lv_name_0_0='color_indication'
				{
					newLeafNode(lv_name_0_0, grammarAccess.getColor_indicationAccess().getNameColor_indicationKeyword_0_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getColor_indicationRule());
					}
					setWithLastConsumed($current, "name", lv_name_0_0, "color_indication");
				}
			)
		)
		otherlv_1='with_color'
		{
			newLeafNode(otherlv_1, grammarAccess.getColor_indicationAccess().getWith_colorKeyword_1());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getColor_indicationAccess().getColorLED_ColorEnumRuleCall_2_0());
				}
				lv_color_2_0=ruleLED_Color
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getColor_indicationRule());
					}
					set(
						$current,
						"color",
						lv_color_2_0,
						"org.xtext.robotFinal.MarsRover.LED_Color");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRuleavoid_lakes
entryRuleavoid_lakes returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getAvoid_lakesRule()); }
	iv_ruleavoid_lakes=ruleavoid_lakes
	{ $current=$iv_ruleavoid_lakes.current; }
	EOF;

// Rule avoid_lakes
ruleavoid_lakes returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			lv_name_0_0='avoid_lakes'
			{
				newLeafNode(lv_name_0_0, grammarAccess.getAvoid_lakesAccess().getNameAvoid_lakesKeyword_0());
			}
			{
				if ($current==null) {
					$current = createModelElement(grammarAccess.getAvoid_lakesRule());
				}
				setWithLastConsumed($current, "name", lv_name_0_0, "avoid_lakes");
			}
		)
	)
;

// Rule Color
ruleColor returns [Enumerator current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			enumLiteral_0='red'
			{
				$current = grammarAccess.getColorAccess().getCOLOR_REDEnumLiteralDeclaration_0().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_0, grammarAccess.getColorAccess().getCOLOR_REDEnumLiteralDeclaration_0());
			}
		)
		    |
		(
			enumLiteral_1='blue'
			{
				$current = grammarAccess.getColorAccess().getCOLOR_BLUEEnumLiteralDeclaration_1().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_1, grammarAccess.getColorAccess().getCOLOR_BLUEEnumLiteralDeclaration_1());
			}
		)
		    |
		(
			enumLiteral_2='green'
			{
				$current = grammarAccess.getColorAccess().getCOLOR_GREENEnumLiteralDeclaration_2().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_2, grammarAccess.getColorAccess().getCOLOR_GREENEnumLiteralDeclaration_2());
			}
		)
		    |
		(
			enumLiteral_3='orange'
			{
				$current = grammarAccess.getColorAccess().getCOLOR_ORANGEEnumLiteralDeclaration_3().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_3, grammarAccess.getColorAccess().getCOLOR_ORANGEEnumLiteralDeclaration_3());
			}
		)
		    |
		(
			enumLiteral_4='white'
			{
				$current = grammarAccess.getColorAccess().getCOLOR_WHITEEnumLiteralDeclaration_4().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_4, grammarAccess.getColorAccess().getCOLOR_WHITEEnumLiteralDeclaration_4());
			}
		)
		    |
		(
			enumLiteral_5='black'
			{
				$current = grammarAccess.getColorAccess().getCOLOR_BLACKEnumLiteralDeclaration_5().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_5, grammarAccess.getColorAccess().getCOLOR_BLACKEnumLiteralDeclaration_5());
			}
		)
		    |
		(
			enumLiteral_6='off'
			{
				$current = grammarAccess.getColorAccess().getCOLOR_OFFEnumLiteralDeclaration_6().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_6, grammarAccess.getColorAccess().getCOLOR_OFFEnumLiteralDeclaration_6());
			}
		)
	)
;

// Rule LED_Color
ruleLED_Color returns [Enumerator current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			enumLiteral_0='orange'
			{
				$current = grammarAccess.getLED_ColorAccess().getLED_ORANGEEnumLiteralDeclaration_0().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_0, grammarAccess.getLED_ColorAccess().getLED_ORANGEEnumLiteralDeclaration_0());
			}
		)
		    |
		(
			enumLiteral_1='red'
			{
				$current = grammarAccess.getLED_ColorAccess().getLED_REDEnumLiteralDeclaration_1().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_1, grammarAccess.getLED_ColorAccess().getLED_REDEnumLiteralDeclaration_1());
			}
		)
		    |
		(
			enumLiteral_2='green'
			{
				$current = grammarAccess.getLED_ColorAccess().getLED_GREENEnumLiteralDeclaration_2().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_2, grammarAccess.getLED_ColorAccess().getLED_GREENEnumLiteralDeclaration_2());
			}
		)
		    |
		(
			enumLiteral_3='off'
			{
				$current = grammarAccess.getLED_ColorAccess().getLED_OFFEnumLiteralDeclaration_3().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_3, grammarAccess.getLED_ColorAccess().getLED_OFFEnumLiteralDeclaration_3());
			}
		)
	)
;

RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' .|~(('\\'|'"')))* '"'|'\'' ('\\' .|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;
