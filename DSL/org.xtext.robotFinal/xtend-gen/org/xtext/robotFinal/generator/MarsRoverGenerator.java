/**
 * generated by Xtext 2.12.0
 */
package org.xtext.robotFinal.generator;

import com.google.common.base.Objects;
import java.util.Arrays;
import org.eclipse.emf.common.util.EList;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.resource.Resource;
import org.eclipse.xtend2.lib.StringConcatenation;
import org.eclipse.xtext.generator.AbstractGenerator;
import org.eclipse.xtext.generator.IFileSystemAccess2;
import org.eclipse.xtext.generator.IGeneratorContext;
import org.eclipse.xtext.xbase.lib.InputOutput;
import org.eclipse.xtext.xbase.lib.IteratorExtensions;
import org.xtext.robotFinal.marsRover.Color;
import org.xtext.robotFinal.marsRover.Robot;
import org.xtext.robotFinal.marsRover.avoid_lakes;
import org.xtext.robotFinal.marsRover.avoid_obstacles;
import org.xtext.robotFinal.marsRover.bumpers;
import org.xtext.robotFinal.marsRover.color_indication;
import org.xtext.robotFinal.marsRover.detect_lakes;
import org.xtext.robotFinal.marsRover.detect_rocks;
import org.xtext.robotFinal.marsRover.indication;
import org.xtext.robotFinal.marsRover.message;
import org.xtext.robotFinal.marsRover.mission;
import org.xtext.robotFinal.marsRover.push_obstacles;
import org.xtext.robotFinal.marsRover.sound;
import org.xtext.robotFinal.marsRover.ultra;

/**
 * Generates code from your model files on save.
 * 
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#code-generation
 */
@SuppressWarnings("all")
public class MarsRoverGenerator extends AbstractGenerator {
  private detect_lakes dl = null;
  
  private avoid_obstacles ao = null;
  
  private avoid_lakes al = null;
  
  private push_obstacles po = null;
  
  private detect_rocks dr = null;
  
  private ultra u = null;
  
  private bumpers b = null;
  
  public void init(final Robot root) {
    EList<mission> _missions = root.getMissions();
    for (final mission mission : _missions) {
      {
        String _typeToText = MarsRoverGenerator.typeToText(mission.getType());
        boolean _equals = Objects.equal(_typeToText, "detect_lakes");
        InputOutput.<Boolean>println(Boolean.valueOf(_equals));
        String _typeToText_1 = MarsRoverGenerator.typeToText(mission.getType());
        boolean _equals_1 = Objects.equal(_typeToText_1, "detect_lakes");
        if (_equals_1) {
          EObject _type = mission.getType();
          this.dl = ((detect_lakes) _type);
        } else {
          boolean _equals_2 = MarsRoverGenerator.typeToText(mission.getType()).equals("avoid_obstacles");
          if (_equals_2) {
            EObject _type_1 = mission.getType();
            this.ao = ((avoid_obstacles) _type_1);
            EList<EObject> _sensors = this.ao.getSensors();
            for (final EObject sensor : _sensors) {
              String _sensorToText = MarsRoverGenerator.sensorToText(sensor);
              boolean _equals_3 = Objects.equal(_sensorToText, "ultra");
              if (_equals_3) {
                this.u = ((ultra) sensor);
              } else {
                String _sensorToText_1 = MarsRoverGenerator.sensorToText(sensor);
                boolean _equals_4 = Objects.equal(_sensorToText_1, "bumpers");
                if (_equals_4) {
                  this.b = ((bumpers) sensor);
                }
              }
            }
          } else {
            boolean _equals_5 = MarsRoverGenerator.typeToText(mission.getType()).equals("avoid_lakes");
            if (_equals_5) {
              EObject _type_2 = mission.getType();
              this.al = ((avoid_lakes) _type_2);
            } else {
              boolean _equals_6 = MarsRoverGenerator.typeToText(mission.getType()).equals("push_obstacles");
              if (_equals_6) {
                EObject _type_3 = mission.getType();
                this.po = ((push_obstacles) _type_3);
              } else {
                boolean _equals_7 = MarsRoverGenerator.typeToText(mission.getType()).equals("detect_rocks");
                if (_equals_7) {
                  EObject _type_4 = mission.getType();
                  this.dr = ((detect_rocks) _type_4);
                }
              }
            }
          }
        }
      }
    }
  }
  
  @Override
  public void doGenerate(final Resource resource, final IFileSystemAccess2 fsa, final IGeneratorContext context) {
    EObject _head = IteratorExtensions.<EObject>head(resource.getAllContents());
    final Robot root = ((Robot) _head);
    String path = "../";
    this.init(root);
    if ((root != null)) {
      fsa.generateFile((path + "master.cpp"), this.toCpp(root));
      fsa.generateFile((path + "slave.cpp"), this.toCppSlave(root));
    }
  }
  
  public String parseMAC(final String mac) {
    int i = 0;
    String res = "";
    {
      int _length = mac.length();
      boolean _lessThan = (i < _length);
      boolean _while = _lessThan;
      while (_while) {
        {
          String _res = res;
          String _upperCase = mac.substring(i, (i + 2)).toUpperCase();
          String _plus = ("0x" + _upperCase);
          res = (_res + _plus);
          int _length_1 = mac.length();
          int _minus = (_length_1 - 2);
          boolean _notEquals = (i != _minus);
          if (_notEquals) {
            String _res_1 = res;
            res = (_res_1 + ", ");
          }
        }
        int _i = i;
        i = (_i + 2);
        int _length_1 = mac.length();
        boolean _lessThan_1 = (i < _length_1);
        _while = _lessThan_1;
      }
    }
    return res;
  }
  
  protected static String _typeToText(final detect_lakes dl) {
    return "detect_lakes";
  }
  
  protected static String _typeToText(final avoid_obstacles ao) {
    return "avoid_obstacles";
  }
  
  protected static String _typeToText(final avoid_lakes al) {
    return "avoid_lakes";
  }
  
  protected static String _typeToText(final push_obstacles po) {
    return "push_obstacles";
  }
  
  protected static String _typeToText(final detect_rocks dr) {
    return "detect_rocks";
  }
  
  protected static String _sensorToText(final ultra s) {
    return "ultra";
  }
  
  protected static String _sensorToText(final bumpers s) {
    return "bumpers";
  }
  
  protected static String _indicationToText(final sound s) {
    return "sound";
  }
  
  protected static String _indicationToText(final color_indication ci) {
    return "color_indication";
  }
  
  protected static String _indicationToText(final message m) {
    return "message";
  }
  
  public static CharSequence getNumOfLakes(final detect_lakes dl) {
    StringConcatenation _builder = new StringConcatenation();
    int _number_of_lakes = dl.getNumber_of_lakes();
    _builder.append(_number_of_lakes);
    _builder.newLineIfNotEmpty();
    return _builder;
  }
  
  public CharSequence toCpp(final Robot root) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("//MASTER");
    _builder.newLine();
    _builder.newLine();
    _builder.append("#include \"app.h\"");
    _builder.newLine();
    _builder.newLine();
    _builder.append("int32_t FONT_WIDTH, FONT_HEIGHT, NLINES;");
    _builder.newLine();
    _builder.newLine();
    _builder.append("// Speed settings");
    _builder.newLine();
    _builder.append("uint32_t");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("DRIVE_SPEED = ");
    int _drive_speed = root.getDrive_speed();
    _builder.append(_drive_speed, "\t");
    _builder.append(" ,");
    _builder.newLineIfNotEmpty();
    _builder.append("\t");
    _builder.append("SPECIAL_SPEED = ");
    int _special_speed = root.getSpecial_speed();
    _builder.append(_special_speed, "\t");
    _builder.append(";");
    _builder.newLineIfNotEmpty();
    _builder.newLine();
    _builder.append("/**");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("* Brick 1 sensor and motor maping");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("* */");
    _builder.newLine();
    _builder.append("// Sensor mapping");
    _builder.newLine();
    _builder.append("sensor_port_t");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("COLOR_L = EV3_PORT_1,");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("COLOR_R = EV3_PORT_4,");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("ULTRA_B = EV3_PORT_2,");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("GYRO\t  = EV3_PORT_3;");
    _builder.newLine();
    _builder.newLine();
    _builder.newLine();
    _builder.append("// Motor mapping");
    _builder.newLine();
    _builder.append("motor_port_t");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("LEFT_P    = EV3_PORT_A,");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("RIGHT_P   = EV3_PORT_D,");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("SMALL_ARM = EV3_PORT_C;");
    _builder.newLine();
    _builder.newLine();
    _builder.newLine();
    _builder.newLine();
    _builder.append("/*");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("* Variables for reading sensor values");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("* */");
    _builder.newLine();
    _builder.append("bool_t");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("touch_left = false,");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("touch_right = false,");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("do_exit = false;");
    _builder.newLine();
    _builder.newLine();
    _builder.append("colorid_t");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("color_left  = COLOR_WHITE,");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("color_right = COLOR_WHITE,");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("color_mid = COLOR_WHITE;");
    _builder.newLine();
    _builder.newLine();
    _builder.append("int16_t");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("ultrasonic_back = 3,");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("ultrasonic_front = 40;");
    _builder.newLine();
    _builder.newLine();
    {
      if ((this.dl != null)) {
        _builder.append("const int NUM_OF_LAKES = ");
        int _number_of_lakes = this.dl.getNumber_of_lakes();
        _builder.append(_number_of_lakes);
        _builder.append(";");
        _builder.newLineIfNotEmpty();
      } else {
        _builder.append("const int NUM_OF_LAKES = 0;");
        _builder.newLine();
      }
    }
    _builder.newLine();
    {
      if ((this.u != null)) {
        _builder.append("const int ULTRASONIC_FRONT_DISTANCE = ");
        int _distance = this.u.getDistance();
        _builder.append(_distance);
        _builder.append(";");
        _builder.newLineIfNotEmpty();
      } else {
        _builder.append("const int ULTRASONIC_FRONT_DISTANCE = 20;");
        _builder.newLine();
      }
    }
    _builder.newLine();
    _builder.append("int added_lakes = 0;");
    _builder.newLine();
    _builder.append("colorid_t *seen_lakes;");
    _builder.newLine();
    _builder.newLine();
    _builder.append("int bumper_code = 0;");
    _builder.newLine();
    _builder.newLine();
    _builder.newLine();
    _builder.append("uint8_t slave_address[6] = { ");
    String _parseMAC = this.parseMAC(root.getSlave_address());
    _builder.append(_parseMAC);
    _builder.append(" };");
    _builder.newLineIfNotEmpty();
    _builder.append("const char* pin = \"0000\";");
    _builder.newLine();
    _builder.append("static FILE *bt_con;");
    _builder.newLine();
    _builder.append("bool_t is_master = true;");
    _builder.newLine();
    _builder.newLine();
    _builder.append("int line = 0;");
    _builder.newLine();
    _builder.newLine();
    _builder.append("void main_task(intptr_t unused) {");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("init();");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("//read_sensors(1);");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("moving(DRIVE_SPEED, DRIVE_SPEED);");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("act_tsk(STAY_TASK);");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("//act_tsk(BACK_TASK);");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("while(true) {");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("if (do_exit)");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("break;");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("dly_tsk(100);");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("//sleep(100);");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("missions();");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("ev3_motor_stop(LEFT_P,true);");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("ev3_motor_stop(RIGHT_P,true);");
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("void missions()");
    _builder.newLine();
    _builder.append("{");
    _builder.newLine();
    {
      EList<mission> _missions = root.getMissions();
      for(final mission mission : _missions) {
        _builder.append("\t");
        String _typeToText = MarsRoverGenerator.typeToText(mission.getType());
        _builder.append(_typeToText, "\t");
        _builder.append("();");
        _builder.newLineIfNotEmpty();
      }
    }
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("void stay_on_task(intptr_t unused)");
    _builder.newLine();
    _builder.append("{");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("while(true)");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("{");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("if(ultrasonic_back > 10)");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("{");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("ev3_led_set_color(LED_RED);");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("moving(DRIVE_SPEED, DRIVE_SPEED);");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("stay_on_board();");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("void bt_task(intptr_t unused)");
    _builder.newLine();
    _builder.append("{");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("static char buf[16];");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("while (fgets(buf, 16, bt_con)) {");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("get_values(buf);");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("//cycle_print(buf);");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("read_sensors(1);");
    _builder.newLine();
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("/*");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("if(strcmp(buf, \"1\\n\") == 0)");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("ev3_led_set_color(LED_GREEN);");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("else if (strcmp(buf,\"0\\n\") == 0)");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("ev3_led_set_color(LED_RED);");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("else");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("ev3_led_set_color(LED_OFF);");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("*/");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("//cycle_print(buf);");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("dly_tsk(100);");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("void back_ultra_task(intptr_t unused){");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("cycle_print((char *) \"v tasku sm\");");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("char pom[20];");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("while(true)");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("{");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("sprintf(pom,\"distance back %d\\n\", ultrasonic_back);");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("cycle_print(pom);");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("if(ultrasonic_back > 10)");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("{");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("ev3_led_set_color(LED_RED);");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("moving(DRIVE_SPEED, DRIVE_SPEED);");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.newLine();
    _builder.append("void get_values(char buffer[16])");
    _builder.newLine();
    _builder.append("{");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("//buffer = \"3;44;3;\";");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("char *p = buffer;");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("char *pom = (char*) malloc(sizeof(char) * 16);");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("int read_values[3];");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("for(int i = 0; i < 3; i++)");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("{");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("int j = 0;");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("while(*p != \';\')");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("{");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("pom[j++] = *p;");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("p++;");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("p++;");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("int x = atoi(pom);");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("read_values[i] = x;");
    _builder.newLine();
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("sprintf(pom,\"%d --> %d\\n\", i,x);");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("//cycle_print(pom);");
    _builder.newLine();
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("free(pom);");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("pom = (char * ) malloc(sizeof(char) * 16);");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("color_mid = (colorid_t) read_values[0];");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("ultrasonic_front = read_values[1];");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("bumper_code = read_values[2];");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("switch(read_values[2])");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("{");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("case 0: touch_left = false; touch_right = false; break;");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("case 1: touch_left = true; touch_right = false; break;");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("case 2: touch_left = false; touch_right = true; break;");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("case 3: touch_left = true; touch_right = true; break;");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("default: touch_left = false; touch_right = false; break;");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("void btConnect() {");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("while(true) {");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("if (is_master) {");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("bt_con = fdopen(SIO_PORT_SPP_MASTER_TEST_FILENO, \"a+\");");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("if (bt_con != NULL) {");
    _builder.newLine();
    _builder.append("                ");
    _builder.append("setbuf(bt_con, NULL);");
    _builder.newLine();
    _builder.append("                ");
    _builder.append("while (!isConnected()) {");
    _builder.newLine();
    _builder.append("                    ");
    _builder.append("cycle_print((char*)\"Connecting...\");");
    _builder.newLine();
    _builder.append("                    ");
    _builder.append("spp_master_test_connect(slave_address, pin);");
    _builder.newLine();
    _builder.append("                    ");
    _builder.append("sleep(1000);");
    _builder.newLine();
    _builder.append("                ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("                ");
    _builder.append("break;");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("        ");
    _builder.append("sleep(1000);");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("cycle_print((char*)\"Connected.\");");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("act_tsk(BT_TASK);");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("//act_tsk(BACK_TASK);");
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("bool_t isConnected() {");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("T_SERIAL_RPOR rpor;");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("ER ercd = serial_ref_por(SIO_PORT_SPP_MASTER_TEST, &rpor);");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("return ercd == E_OK;");
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("void set_font(lcdfont_t font) {");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("ev3_lcd_set_font(font);");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("ev3_font_get_size(font, &FONT_WIDTH, &FONT_HEIGHT);");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("NLINES = EV3_LCD_HEIGHT / FONT_HEIGHT;");
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("void init() {");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("set_font(EV3_FONT_SMALL);");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("btConnect();");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("/*");
    _builder.newLine();
    _builder.append("     ");
    _builder.append("* Brick 1 inicializations");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("*/");
    _builder.newLine();
    _builder.append("//\tMotor init");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("ev3_motor_config(LEFT_P, LARGE_MOTOR);");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("ev3_motor_config(RIGHT_P, LARGE_MOTOR);");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("ev3_motor_config(SMALL_ARM, MEDIUM_MOTOR);");
    _builder.newLine();
    _builder.append("//\tSensor init");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("ev3_sensor_config(COLOR_R, COLOR_SENSOR);");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("ev3_sensor_config(COLOR_L, COLOR_SENSOR);");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("ev3_sensor_config(ULTRA_B, ULTRASONIC_SENSOR);");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("ev3_sensor_config(GYRO,GYRO_SENSOR);");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("//\tAttach exit handler");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("ev3_button_set_on_clicked(ENTER_BUTTON, close_app, ENTER_BUTTON);");
    _builder.newLine();
    _builder.newLine();
    _builder.append("\t");
    _builder.append("seen_lakes = (colorid_t *) malloc(sizeof(colorid_t) * NUM_OF_LAKES);");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("for(int i = 0; i < NUM_OF_LAKES; i++)");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("{");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("seen_lakes[i] = COLOR_NONE;");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("void read_sensors(int display_line) {");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("color_left = ev3_color_sensor_get_color(COLOR_L);");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("color_right = ev3_color_sensor_get_color(COLOR_R);");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("ultrasonic_back = ev3_ultrasonic_sensor_get_distance(ULTRA_B);");
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("void print_sensor_values(int start_line) {");
    _builder.newLine();
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.newLine();
    _builder.append("void close_app(intptr_t btn) {");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("do_exit = true;");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("ev3_print(5, \"Finishing..\");");
    _builder.newLine();
    _builder.newLine();
    _builder.append("\t");
    _builder.append("ev3_motor_stop(LEFT_P, true);");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("ev3_motor_stop(RIGHT_P, true);");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("ev3_lcd_clear_line(5);");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("ev3_print(5, \"Finished!\");");
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("void cycle_print(char* message) {");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("int printLine = ++line % NLINES;");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("if (line >= NLINES)");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("ev3_lcd_clear_line_range(printLine, printLine + 1);");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("ev3_print(printLine, message);");
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("void moving(uint32_t speed_left, uint32_t speed_right)");
    _builder.newLine();
    _builder.append("{");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("ev3_motor_set_power(LEFT_P, speed_left);");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("ev3_motor_set_power(RIGHT_P, speed_right);");
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("void turn(bool direction, uint32_t speed)");
    _builder.newLine();
    _builder.append("{");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("moving(-(speed/ 2), -(speed / 2));");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("//sleep(500);");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("dly_tsk(1000);");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("if(direction) // turn right");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("{");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("moving((speed), -(speed / 2));");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("else");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("{");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("moving(-(speed / 2), (speed));");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("sleep(500);");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("moving(DRIVE_SPEED, DRIVE_SPEED);");
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("bool detect_ultra_back()");
    _builder.newLine();
    _builder.append("{");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("if(ultrasonic_back > 3 /*razdalja od mize*/) // baje 3");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("{");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("return true; //padu je z mize");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("return false;");
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.newLine();
    _builder.append("colorid_t color_sensor_left()");
    _builder.newLine();
    _builder.append("{");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("return color_left;");
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("colorid_t color_sensor_right()");
    _builder.newLine();
    _builder.append("{");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("return color_right;");
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("void stay_on_board()");
    _builder.newLine();
    _builder.append("{");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("colorid_t l = color_sensor_left();");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("colorid_t r = color_sensor_right();");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("if(l == COLOR_WHITE && r == COLOR_WHITE)");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("{");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("moving(-(DRIVE_SPEED / 2), -(DRIVE_SPEED / 2));");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("dly_tsk(1000);");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("moving(2 * DRIVE_SPEED,-(2 * DRIVE_SPEED));");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("dly_tsk(500);");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("moving(DRIVE_SPEED, DRIVE_SPEED);");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("\t");
    _builder.append("if(l == COLOR_WHITE)");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("{");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("turn(true,DRIVE_SPEED);");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("if(r == COLOR_WHITE)");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("{");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("turn(false, DRIVE_SPEED);");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("void bumper_detection(int num)");
    _builder.newLine();
    _builder.append("{");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("switch(num)");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("{");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("case 0: break;");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("case 1: turn(true, SPECIAL_SPEED); break;");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("case 2: turn(false, SPECIAL_SPEED); break;");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("case 3: turn(random_turn_direction(), SPECIAL_SPEED); break;");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("default: break;");
    _builder.newLine();
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("bool random_turn_direction()");
    _builder.newLine();
    _builder.append("{");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("/*");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("srand(time(NULL));");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("int r = rand() % 2;");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("*/");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("return true;");
    _builder.newLine();
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("void detect_lakes()");
    _builder.newLine();
    _builder.append("{");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("colorid_t detected_color = color_mid; //dobiva iz druzga bricka");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("if(color_found(detected_color))");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("{");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("if(already_seen_color(detected_color))");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("{");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("turn(random_turn_direction(),SPECIAL_SPEED);");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("else");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("{");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("seen_lakes[added_lakes++] = detected_color;");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("// pomoc ga v jezero za DSL definicijo sekund");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("examinate_lake();");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("if(added_lakes == NUM_OF_LAKES)");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("after_examinating_all_lakes();");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("else if(color_found_avoid(detected_color)){");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("turn(random_turn_direction(),SPECIAL_SPEED);");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("if(color_found(color_left))");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("{");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("if(already_seen_color(color_left))");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("turn(true, DRIVE_SPEED);");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("else");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("{");
    _builder.newLine();
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("ev3_motor_set_power(LEFT_P, -20);");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("ev3_motor_set_power(RIGHT_P, -10);");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("dly_tsk(500);");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("ev3_motor_set_power(LEFT_P, 10);");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("ev3_motor_set_power(RIGHT_P, 10);");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("dly_tsk(500);");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("else if(color_found_avoid(color_left)){");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("turn(false, DRIVE_SPEED);");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("if(color_found(color_right))");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("{");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("if(already_seen_color(color_right))");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("turn(false, DRIVE_SPEED);");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("else");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("{");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("ev3_motor_set_power(LEFT_P, -10);");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("ev3_motor_set_power(RIGHT_P, -20);");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("dly_tsk(500);");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("ev3_motor_set_power(LEFT_P, 10);");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("ev3_motor_set_power(RIGHT_P, 10);");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("dly_tsk(500);");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("else if(color_found_avoid(color_right)){");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("turn(true, DRIVE_SPEED);");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.newLine();
    _builder.append("bool already_seen_color(colorid_t c)");
    _builder.newLine();
    _builder.append("{");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("for(int i = 0; i < NUM_OF_LAKES; i++)");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("{");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("if(seen_lakes[i] == c)");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("return true;");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("return false;");
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("void examinate_lake()");
    _builder.newLine();
    _builder.append("{");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("//poskavanga z palcko");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("moving(-DRIVE_SPEED, -DRIVE_SPEED);");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("dly_tsk(350);");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("ev3_motor_stop(LEFT_P, true);");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("ev3_motor_stop(RIGHT_P, true);");
    _builder.newLine();
    _builder.newLine();
    _builder.append("\t");
    _builder.append("//magija");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("ev3_motor_set_power(SMALL_ARM, -5);");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("dly_tsk(2000);");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("ev3_motor_stop(SMALL_ARM,true);");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("dly_tsk(3000);");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("ev3_motor_set_power(SMALL_ARM, 5);");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("dly_tsk(2000);");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("//konec magije");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("turn(random_turn_direction(), DRIVE_SPEED);");
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("void avoid_obstacles()");
    _builder.newLine();
    _builder.append("{");
    _builder.newLine();
    {
      boolean _notEquals = (!Objects.equal(this.b, null));
      if (_notEquals) {
        _builder.append("\t");
        _builder.append("bumper_detection(bumper_code);");
        _builder.newLine();
      }
    }
    {
      boolean _notEquals_1 = (!Objects.equal(this.u, null));
      if (_notEquals_1) {
        _builder.append("\t");
        _builder.append("if(ultrasonic_front < ULTRASONIC_FRONT_DISTANCE)");
        _builder.newLine();
        _builder.append("\t");
        _builder.append("{");
        _builder.newLine();
        _builder.append("\t");
        _builder.append("\t");
        _builder.append("turn(random_turn_direction(), DRIVE_SPEED);");
        _builder.newLine();
        _builder.append("\t");
        _builder.append("}");
        _builder.newLine();
      }
    }
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("void avoid_lakes()");
    _builder.newLine();
    _builder.append("{");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("colorid_t detected_color = color_mid;");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("if(color_found_avoid(detected_color))");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("{");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("turn(random_turn_direction(),DRIVE_SPEED);");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("else if(color_found_avoid(color_left))");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("{");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("turn(true, DRIVE_SPEED);");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("else if(color_found_avoid(color_right))");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("{");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("turn(false, DRIVE_SPEED);");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("void after_examinating_all_lakes()");
    _builder.newLine();
    _builder.append("{");
    _builder.newLine();
    {
      boolean _notEquals_2 = (!Objects.equal(this.dl, null));
      if (_notEquals_2) {
        _builder.append("\t");
        String _indication = this.getIndication();
        _builder.append(_indication, "\t");
        _builder.newLineIfNotEmpty();
        {
          String _action = this.dl.getAfter_examinating().getAction();
          boolean _equals = Objects.equal(_action, "stop");
          if (_equals) {
            _builder.append("\t");
            _builder.append("do_exit = true;");
            _builder.newLine();
          }
        }
      }
    }
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.newLine();
    _builder.append("bool color_found(colorid_t color)");
    _builder.newLine();
    _builder.append("{");
    _builder.newLine();
    {
      boolean _notEquals_3 = (!Objects.equal(this.dl, null));
      if (_notEquals_3) {
        _builder.append("\t");
        _builder.append("return ");
        {
          EList<Color> _lakes_colors = this.dl.getLakes_colors();
          boolean _hasElements = false;
          for(final Color color : _lakes_colors) {
            if (!_hasElements) {
              _hasElements = true;
            } else {
              _builder.appendImmediate(" || ", "\t");
            }
            _builder.append("color == ");
            String _name = color.getName();
            _builder.append(_name, "\t");
          }
        }
        _builder.append(";");
        _builder.newLineIfNotEmpty();
      } else {
        _builder.append("\t");
        _builder.append("return color == COLOR_GREEN || color == COLOR_BLUE || color == COLOR_RED;");
        _builder.newLine();
      }
    }
    _builder.append("\t");
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("bool color_found_avoid(colorid_t color)");
    _builder.newLine();
    _builder.append("{");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("return color == COLOR_GREEN || color == COLOR_BLUE || color == COLOR_RED;");
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("void push_obstacles(){");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("if (ultrasonic_front < 7) {");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("int i = 0;");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("do{");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("moving(DRIVE_SPEED, DRIVE_SPEED);");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("ev3_led_set_color(i++ % 2 == 0 ? LED_GREEN  : LED_ORANGE);");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("dly_tsk(500);");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("} while(color_left != COLOR_WHITE);");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("ev3_led_set_color(LED_OFF);");
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.newLine();
    _builder.newLine();
    return _builder;
  }
  
  public String getIndication() {
    String ret = "";
    EList<indication> _indicate = this.dl.getAfter_examinating().getIndicate();
    for (final indication indication : _indicate) {
      {
        InputOutput.<String>println(MarsRoverGenerator.indicationToText(indication.getType()));
        String _indicationToText = MarsRoverGenerator.indicationToText(indication.getType());
        boolean _equals = Objects.equal(_indicationToText, "sound");
        if (_equals) {
          String _ret = ret;
          EObject _type = indication.getType();
          int _frequency = ((sound) _type).getFrequency();
          String _plus = ("ev3_speaker_play_tone(" + Integer.valueOf(_frequency));
          String _plus_1 = (_plus + ", ");
          EObject _type_1 = indication.getType();
          int _duration = ((sound) _type_1).getDuration();
          String _plus_2 = (_plus_1 + Integer.valueOf(_duration));
          String _plus_3 = (_plus_2 + ");\n");
          ret = (_ret + _plus_3);
        } else {
          String _indicationToText_1 = MarsRoverGenerator.indicationToText(indication.getType());
          boolean _equals_1 = Objects.equal(_indicationToText_1, "color_indication");
          if (_equals_1) {
            String _ret_1 = ret;
            EObject _type_2 = indication.getType();
            String _name = ((color_indication) _type_2).getColor().getName();
            String _plus_4 = ("ev3_led_set_color(" + _name);
            String _plus_5 = (_plus_4 + ");\n");
            ret = (_ret_1 + _plus_5);
          } else {
            String _indicationToText_2 = MarsRoverGenerator.indicationToText(indication.getType());
            boolean _equals_2 = Objects.equal(_indicationToText_2, "message");
            if (_equals_2) {
              String _ret_2 = ret;
              EObject _type_3 = indication.getType();
              String _msg = ((message) _type_3).getMsg();
              String _plus_6 = ("cycle_print((char*)\"" + _msg);
              String _plus_7 = (_plus_6 + "\");\n");
              ret = (_ret_2 + _plus_7);
            }
          }
        }
      }
    }
    return ret;
  }
  
  public CharSequence toCppSlave(final Robot root) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("//SLAVE");
    _builder.newLine();
    _builder.newLine();
    _builder.append("#include \"app.h\"");
    _builder.newLine();
    _builder.newLine();
    _builder.append("int32_t FONT_WIDTH, FONT_HEIGHT, NLINES;");
    _builder.newLine();
    _builder.newLine();
    _builder.append("/**");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("* Brick 2 sensor");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("* */");
    _builder.newLine();
    _builder.append("// Sensor mapping");
    _builder.newLine();
    _builder.append("sensor_port_t");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("COLOR_MID = EV3_PORT_2,");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("BUMPER_LEFT = EV3_PORT_1,");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("BUMPER_RIGHT = EV3_PORT_4,");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("ULTRA_FRONT = EV3_PORT_3;");
    _builder.newLine();
    _builder.newLine();
    _builder.newLine();
    _builder.append("/*");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("* Variables for reading sensor values");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("* */");
    _builder.newLine();
    _builder.append("bool_t");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("touch_left = false,");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("touch_right = false,");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("do_exit = false;");
    _builder.newLine();
    _builder.newLine();
    _builder.append("colorid_t");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("color_mid  = COLOR_WHITE;");
    _builder.newLine();
    _builder.newLine();
    _builder.append("int16_t");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("ultrasonic_front = 40;");
    _builder.newLine();
    _builder.newLine();
    _builder.newLine();
    _builder.append("const char* pin = \"0000\";");
    _builder.newLine();
    _builder.append("static FILE *bt_con;");
    _builder.newLine();
    _builder.append("bool_t is_master = false;");
    _builder.newLine();
    _builder.newLine();
    _builder.append("int line = 0;");
    _builder.newLine();
    _builder.newLine();
    _builder.newLine();
    _builder.append("void bt_task(intptr_t unused);");
    _builder.newLine();
    _builder.append("void btConnect();");
    _builder.newLine();
    _builder.append("bool_t isConnected();");
    _builder.newLine();
    _builder.append("void set_font(lcdfont_t font);");
    _builder.newLine();
    _builder.append("void init();");
    _builder.newLine();
    _builder.append("void read_sensors(int display_line);");
    _builder.newLine();
    _builder.append("void print_sensor_values(int start_line);");
    _builder.newLine();
    _builder.append("void close_app(intptr_t btn);");
    _builder.newLine();
    _builder.append("void cycle_print(char* message);");
    _builder.newLine();
    _builder.append("unsigned int detect_bumpers();");
    _builder.newLine();
    _builder.append("void send_values();");
    _builder.newLine();
    _builder.newLine();
    _builder.newLine();
    _builder.newLine();
    _builder.append("void main_task(intptr_t unused) {");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("init();");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("while(true) {");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("if (do_exit)");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("break;");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("read_sensors(1);");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("send_values();");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("dly_tsk(100);");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("void bt_task(intptr_t unused)");
    _builder.newLine();
    _builder.append("{");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("while(true)");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("{");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("read_sensors(1);");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("send_values();");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("dly_tsk(500);");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("void btConnect() {");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("while(true) {");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("while (!ev3_bluetooth_is_connected()) {");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("cycle_print((char*)\"Waiting for connection...\");");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("sleep(1000);");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("bt_con = ev3_serial_open_file(EV3_SERIAL_BT);");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("break;");
    _builder.newLine();
    _builder.newLine();
    _builder.append("        ");
    _builder.append("sleep(1000);");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("cycle_print((char*)\"Connected.\");");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("act_tsk(BT_TASK);");
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("bool_t isConnected() {");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("T_SERIAL_RPOR rpor;");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("ER ercd = serial_ref_por(SIO_PORT_SPP_MASTER_TEST, &rpor);");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("return ercd == E_OK;");
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("void set_font(lcdfont_t font) {");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("ev3_lcd_set_font(font);");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("ev3_font_get_size(font, &FONT_WIDTH, &FONT_HEIGHT);");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("NLINES = EV3_LCD_HEIGHT / FONT_HEIGHT;");
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("void init() {");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("set_font(EV3_FONT_SMALL);");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("btConnect();");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("/*");
    _builder.newLine();
    _builder.append("     ");
    _builder.append("* Brick 2 inicializations");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("*/");
    _builder.newLine();
    _builder.newLine();
    _builder.append("//\tSensor init");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("ev3_sensor_config(COLOR_MID, COLOR_SENSOR);");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("ev3_sensor_config(BUMPER_LEFT, TOUCH_SENSOR);");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("ev3_sensor_config(BUMPER_RIGHT, TOUCH_SENSOR);");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("ev3_sensor_config(ULTRA_FRONT, ULTRASONIC_SENSOR);");
    _builder.newLine();
    _builder.newLine();
    _builder.append("\t");
    _builder.append("//\tAttach exit handler");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("ev3_button_set_on_clicked(ENTER_BUTTON, close_app, ENTER_BUTTON);");
    _builder.newLine();
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("void read_sensors(int display_line) {");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("color_mid = ev3_color_sensor_get_color(COLOR_MID);");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("ultrasonic_front = ev3_ultrasonic_sensor_get_distance(ULTRA_FRONT);");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("touch_left = ev3_touch_sensor_is_pressed(BUMPER_LEFT);");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("touch_right = ev3_touch_sensor_is_pressed(BUMPER_RIGHT);");
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("void print_sensor_values(int start_line) {");
    _builder.newLine();
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.newLine();
    _builder.append("void close_app(intptr_t btn) {");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("do_exit = true;");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("ev3_print(5, \"Finishing..\");");
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("void cycle_print(char* message) {");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("int printLine = ++line % NLINES;");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("if (line >= NLINES)");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("ev3_lcd_clear_line_range(printLine, printLine + 1);");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("ev3_print(printLine, message);");
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.newLine();
    _builder.append("unsigned int detect_bumpers()");
    _builder.newLine();
    _builder.append("{");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("/*");
    _builder.newLine();
    _builder.append("\t ");
    _builder.append("* 0 - none");
    _builder.newLine();
    _builder.append("\t ");
    _builder.append("* 1 - left");
    _builder.newLine();
    _builder.append("\t ");
    _builder.append("* 2 - right");
    _builder.newLine();
    _builder.append("\t ");
    _builder.append("* 3 - both");
    _builder.newLine();
    _builder.append("\t ");
    _builder.append("* */");
    _builder.newLine();
    _builder.newLine();
    _builder.append("\t");
    _builder.append("unsigned int sum = 0;");
    _builder.newLine();
    _builder.newLine();
    _builder.append("\t");
    _builder.append("if(touch_left == 1) sum ++;");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("if(touch_right == 1) sum += 2;");
    _builder.newLine();
    _builder.newLine();
    _builder.append("\t");
    _builder.append("return sum;");
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("void send_values()");
    _builder.newLine();
    _builder.append("{");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("fprintf(bt_con, \"%d;%d;%d;\\n\", color_mid, ultrasonic_front, detect_bumpers());");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("/*");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("if(touch_left)");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("fprintf(bt_con,\"1\\n\");");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("if(!touch_left)");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("fprintf(bt_con,\"0\\n\");");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("char pom[30];");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("sprintf(pom,\"color %d\\n\",color_mid);");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("sprintf(pom,\"Distance FRONT: %d\\n\",ultrasonic_front);");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("cycle_print(pom);");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("*/");
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.newLine();
    return _builder;
  }
  
  public static String typeToText(final EObject al) {
    if (al instanceof avoid_lakes) {
      return _typeToText((avoid_lakes)al);
    } else if (al instanceof avoid_obstacles) {
      return _typeToText((avoid_obstacles)al);
    } else if (al instanceof detect_lakes) {
      return _typeToText((detect_lakes)al);
    } else if (al instanceof detect_rocks) {
      return _typeToText((detect_rocks)al);
    } else if (al instanceof push_obstacles) {
      return _typeToText((push_obstacles)al);
    } else {
      throw new IllegalArgumentException("Unhandled parameter types: " +
        Arrays.<Object>asList(al).toString());
    }
  }
  
  public static String sensorToText(final EObject s) {
    if (s instanceof bumpers) {
      return _sensorToText((bumpers)s);
    } else if (s instanceof ultra) {
      return _sensorToText((ultra)s);
    } else {
      throw new IllegalArgumentException("Unhandled parameter types: " +
        Arrays.<Object>asList(s).toString());
    }
  }
  
  public static String indicationToText(final EObject ci) {
    if (ci instanceof color_indication) {
      return _indicationToText((color_indication)ci);
    } else if (ci instanceof message) {
      return _indicationToText((message)ci);
    } else if (ci instanceof sound) {
      return _indicationToText((sound)ci);
    } else {
      throw new IllegalArgumentException("Unhandled parameter types: " +
        Arrays.<Object>asList(ci).toString());
    }
  }
}
