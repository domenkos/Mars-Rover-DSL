/*
 * generated by Xtext 2.12.0
 */
package org.xtext.robotFinal.services;

import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.List;
import org.eclipse.xtext.Alternatives;
import org.eclipse.xtext.Assignment;
import org.eclipse.xtext.EnumLiteralDeclaration;
import org.eclipse.xtext.EnumRule;
import org.eclipse.xtext.Grammar;
import org.eclipse.xtext.GrammarUtil;
import org.eclipse.xtext.Group;
import org.eclipse.xtext.Keyword;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.TerminalRule;
import org.eclipse.xtext.common.services.TerminalsGrammarAccess;
import org.eclipse.xtext.service.AbstractElementFinder.AbstractEnumRuleElementFinder;
import org.eclipse.xtext.service.AbstractElementFinder.AbstractGrammarElementFinder;
import org.eclipse.xtext.service.GrammarProvider;

@Singleton
public class MarsRoverGrammarAccess extends AbstractGrammarElementFinder {
	
	public class RobotElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.robotFinal.MarsRover.Robot");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cRobotKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameSTRINGTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cSlave_addressKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cSlave_addressAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cSlave_addressSTRINGTerminalRuleCall_3_0 = (RuleCall)cSlave_addressAssignment_3.eContents().get(0);
		private final Keyword cDrive_speedKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cDrive_speedAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cDrive_speedINTTerminalRuleCall_5_0 = (RuleCall)cDrive_speedAssignment_5.eContents().get(0);
		private final Keyword cSpecial_speedKeyword_6 = (Keyword)cGroup.eContents().get(6);
		private final Assignment cSpecial_speedAssignment_7 = (Assignment)cGroup.eContents().get(7);
		private final RuleCall cSpecial_speedINTTerminalRuleCall_7_0 = (RuleCall)cSpecial_speedAssignment_7.eContents().get(0);
		private final Keyword cMissionsKeyword_8 = (Keyword)cGroup.eContents().get(8);
		private final Assignment cMissionsAssignment_9 = (Assignment)cGroup.eContents().get(9);
		private final RuleCall cMissionsMissionParserRuleCall_9_0 = (RuleCall)cMissionsAssignment_9.eContents().get(0);
		
		//Robot:
		//	'Robot'
		//	name=STRING
		//	'slave_address' slave_address=STRING
		//	'drive_speed' drive_speed=INT
		//	'special_speed' special_speed=INT
		//	'missions' missions+=mission*;
		@Override public ParserRule getRule() { return rule; }
		
		//'Robot' name=STRING 'slave_address' slave_address=STRING 'drive_speed' drive_speed=INT 'special_speed' special_speed=INT
		//'missions' missions+=mission*
		public Group getGroup() { return cGroup; }
		
		//'Robot'
		public Keyword getRobotKeyword_0() { return cRobotKeyword_0; }
		
		//name=STRING
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//STRING
		public RuleCall getNameSTRINGTerminalRuleCall_1_0() { return cNameSTRINGTerminalRuleCall_1_0; }
		
		//'slave_address'
		public Keyword getSlave_addressKeyword_2() { return cSlave_addressKeyword_2; }
		
		//slave_address=STRING
		public Assignment getSlave_addressAssignment_3() { return cSlave_addressAssignment_3; }
		
		//STRING
		public RuleCall getSlave_addressSTRINGTerminalRuleCall_3_0() { return cSlave_addressSTRINGTerminalRuleCall_3_0; }
		
		//'drive_speed'
		public Keyword getDrive_speedKeyword_4() { return cDrive_speedKeyword_4; }
		
		//drive_speed=INT
		public Assignment getDrive_speedAssignment_5() { return cDrive_speedAssignment_5; }
		
		//INT
		public RuleCall getDrive_speedINTTerminalRuleCall_5_0() { return cDrive_speedINTTerminalRuleCall_5_0; }
		
		//'special_speed'
		public Keyword getSpecial_speedKeyword_6() { return cSpecial_speedKeyword_6; }
		
		//special_speed=INT
		public Assignment getSpecial_speedAssignment_7() { return cSpecial_speedAssignment_7; }
		
		//INT
		public RuleCall getSpecial_speedINTTerminalRuleCall_7_0() { return cSpecial_speedINTTerminalRuleCall_7_0; }
		
		//'missions'
		public Keyword getMissionsKeyword_8() { return cMissionsKeyword_8; }
		
		//missions+=mission*
		public Assignment getMissionsAssignment_9() { return cMissionsAssignment_9; }
		
		//mission
		public RuleCall getMissionsMissionParserRuleCall_9_0() { return cMissionsMissionParserRuleCall_9_0; }
	}
	public class MissionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.robotFinal.MarsRover.mission");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cMissionKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameSTRINGTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cTypeKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cTypeAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final Alternatives cTypeAlternatives_3_0 = (Alternatives)cTypeAssignment_3.eContents().get(0);
		private final RuleCall cTypeAvoid_obstaclesParserRuleCall_3_0_0 = (RuleCall)cTypeAlternatives_3_0.eContents().get(0);
		private final RuleCall cTypeDetect_lakesParserRuleCall_3_0_1 = (RuleCall)cTypeAlternatives_3_0.eContents().get(1);
		private final RuleCall cTypeAvoid_lakesParserRuleCall_3_0_2 = (RuleCall)cTypeAlternatives_3_0.eContents().get(2);
		private final RuleCall cTypePush_obstaclesParserRuleCall_3_0_3 = (RuleCall)cTypeAlternatives_3_0.eContents().get(3);
		private final RuleCall cTypeDetect_rocksParserRuleCall_3_0_4 = (RuleCall)cTypeAlternatives_3_0.eContents().get(4);
		
		//mission:
		//	'mission'
		//	name=STRING
		//	'type' type=(avoid_obstacles | detect_lakes | avoid_lakes | push_obstacles | detect_rocks);
		@Override public ParserRule getRule() { return rule; }
		
		//'mission' name=STRING 'type' type=(avoid_obstacles | detect_lakes | avoid_lakes | push_obstacles | detect_rocks)
		public Group getGroup() { return cGroup; }
		
		//'mission'
		public Keyword getMissionKeyword_0() { return cMissionKeyword_0; }
		
		//name=STRING
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//STRING
		public RuleCall getNameSTRINGTerminalRuleCall_1_0() { return cNameSTRINGTerminalRuleCall_1_0; }
		
		//'type'
		public Keyword getTypeKeyword_2() { return cTypeKeyword_2; }
		
		//type=(avoid_obstacles | detect_lakes | avoid_lakes | push_obstacles | detect_rocks)
		public Assignment getTypeAssignment_3() { return cTypeAssignment_3; }
		
		//(avoid_obstacles | detect_lakes | avoid_lakes | push_obstacles | detect_rocks)
		public Alternatives getTypeAlternatives_3_0() { return cTypeAlternatives_3_0; }
		
		//avoid_obstacles
		public RuleCall getTypeAvoid_obstaclesParserRuleCall_3_0_0() { return cTypeAvoid_obstaclesParserRuleCall_3_0_0; }
		
		//detect_lakes
		public RuleCall getTypeDetect_lakesParserRuleCall_3_0_1() { return cTypeDetect_lakesParserRuleCall_3_0_1; }
		
		//avoid_lakes
		public RuleCall getTypeAvoid_lakesParserRuleCall_3_0_2() { return cTypeAvoid_lakesParserRuleCall_3_0_2; }
		
		//push_obstacles
		public RuleCall getTypePush_obstaclesParserRuleCall_3_0_3() { return cTypePush_obstaclesParserRuleCall_3_0_3; }
		
		//detect_rocks
		public RuleCall getTypeDetect_rocksParserRuleCall_3_0_4() { return cTypeDetect_rocksParserRuleCall_3_0_4; }
	}
	public class Avoid_obstaclesElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.robotFinal.MarsRover.avoid_obstacles");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final Keyword cNameAvoid_obstaclesKeyword_0_0 = (Keyword)cNameAssignment_0.eContents().get(0);
		private final Keyword cSensorsKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cSensorsAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final Alternatives cSensorsAlternatives_2_0 = (Alternatives)cSensorsAssignment_2.eContents().get(0);
		private final RuleCall cSensorsUltraParserRuleCall_2_0_0 = (RuleCall)cSensorsAlternatives_2_0.eContents().get(0);
		private final RuleCall cSensorsBumpersParserRuleCall_2_0_1 = (RuleCall)cSensorsAlternatives_2_0.eContents().get(1);
		
		//avoid_obstacles:
		//	name='avoid_obstacles'
		//	'sensors' sensors+=(ultra | bumpers)*;
		@Override public ParserRule getRule() { return rule; }
		
		//name='avoid_obstacles' 'sensors' sensors+=(ultra | bumpers)*
		public Group getGroup() { return cGroup; }
		
		//name='avoid_obstacles'
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }
		
		//'avoid_obstacles'
		public Keyword getNameAvoid_obstaclesKeyword_0_0() { return cNameAvoid_obstaclesKeyword_0_0; }
		
		//'sensors'
		public Keyword getSensorsKeyword_1() { return cSensorsKeyword_1; }
		
		//sensors+=(ultra | bumpers)*
		public Assignment getSensorsAssignment_2() { return cSensorsAssignment_2; }
		
		//(ultra | bumpers)
		public Alternatives getSensorsAlternatives_2_0() { return cSensorsAlternatives_2_0; }
		
		//ultra
		public RuleCall getSensorsUltraParserRuleCall_2_0_0() { return cSensorsUltraParserRuleCall_2_0_0; }
		
		//bumpers
		public RuleCall getSensorsBumpersParserRuleCall_2_0_1() { return cSensorsBumpersParserRuleCall_2_0_1; }
	}
	public class UltraElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.robotFinal.MarsRover.ultra");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final Keyword cNameUltraKeyword_0_0 = (Keyword)cNameAssignment_0.eContents().get(0);
		private final Keyword cDistanceKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cDistanceAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cDistanceINTTerminalRuleCall_2_0 = (RuleCall)cDistanceAssignment_2.eContents().get(0);
		
		//ultra:
		//	name='ultra'
		//	'distance' distance=INT;
		@Override public ParserRule getRule() { return rule; }
		
		//name='ultra' 'distance' distance=INT
		public Group getGroup() { return cGroup; }
		
		//name='ultra'
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }
		
		//'ultra'
		public Keyword getNameUltraKeyword_0_0() { return cNameUltraKeyword_0_0; }
		
		//'distance'
		public Keyword getDistanceKeyword_1() { return cDistanceKeyword_1; }
		
		//distance=INT
		public Assignment getDistanceAssignment_2() { return cDistanceAssignment_2; }
		
		//INT
		public RuleCall getDistanceINTTerminalRuleCall_2_0() { return cDistanceINTTerminalRuleCall_2_0; }
	}
	public class BumpersElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.robotFinal.MarsRover.bumpers");
		private final Assignment cNameAssignment = (Assignment)rule.eContents().get(1);
		private final Keyword cNameBumpersKeyword_0 = (Keyword)cNameAssignment.eContents().get(0);
		
		//bumpers:
		//	name='bumpers';
		@Override public ParserRule getRule() { return rule; }
		
		//name='bumpers'
		public Assignment getNameAssignment() { return cNameAssignment; }
		
		//'bumpers'
		public Keyword getNameBumpersKeyword_0() { return cNameBumpersKeyword_0; }
	}
	public class Detect_lakesElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.robotFinal.MarsRover.detect_lakes");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final Keyword cNameDetect_lakesKeyword_0_0 = (Keyword)cNameAssignment_0.eContents().get(0);
		private final Keyword cNumber_of_lakesKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cNumber_of_lakesAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNumber_of_lakesINTTerminalRuleCall_2_0 = (RuleCall)cNumber_of_lakesAssignment_2.eContents().get(0);
		private final Keyword cLakes_colorsKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cLakes_colorsAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cLakes_colorsColorEnumRuleCall_4_0 = (RuleCall)cLakes_colorsAssignment_4.eContents().get(0);
		private final Keyword cAfter_examinatingKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Assignment cAfter_examinatingAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final RuleCall cAfter_examinatingAfter_actionParserRuleCall_6_0 = (RuleCall)cAfter_examinatingAssignment_6.eContents().get(0);
		
		//detect_lakes:
		//	name='detect_lakes'
		//	'number_of_lakes' number_of_lakes=INT
		//	'lakes_colors' lakes_colors+=Color*
		//	'after_examinating' after_examinating=after_action;
		@Override public ParserRule getRule() { return rule; }
		
		//name='detect_lakes' 'number_of_lakes' number_of_lakes=INT 'lakes_colors' lakes_colors+=Color* 'after_examinating'
		//after_examinating=after_action
		public Group getGroup() { return cGroup; }
		
		//name='detect_lakes'
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }
		
		//'detect_lakes'
		public Keyword getNameDetect_lakesKeyword_0_0() { return cNameDetect_lakesKeyword_0_0; }
		
		//'number_of_lakes'
		public Keyword getNumber_of_lakesKeyword_1() { return cNumber_of_lakesKeyword_1; }
		
		//number_of_lakes=INT
		public Assignment getNumber_of_lakesAssignment_2() { return cNumber_of_lakesAssignment_2; }
		
		//INT
		public RuleCall getNumber_of_lakesINTTerminalRuleCall_2_0() { return cNumber_of_lakesINTTerminalRuleCall_2_0; }
		
		//'lakes_colors'
		public Keyword getLakes_colorsKeyword_3() { return cLakes_colorsKeyword_3; }
		
		//lakes_colors+=Color*
		public Assignment getLakes_colorsAssignment_4() { return cLakes_colorsAssignment_4; }
		
		//Color
		public RuleCall getLakes_colorsColorEnumRuleCall_4_0() { return cLakes_colorsColorEnumRuleCall_4_0; }
		
		//'after_examinating'
		public Keyword getAfter_examinatingKeyword_5() { return cAfter_examinatingKeyword_5; }
		
		//after_examinating=after_action
		public Assignment getAfter_examinatingAssignment_6() { return cAfter_examinatingAssignment_6; }
		
		//after_action
		public RuleCall getAfter_examinatingAfter_actionParserRuleCall_6_0() { return cAfter_examinatingAfter_actionParserRuleCall_6_0; }
	}
	public class Detect_rocksElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.robotFinal.MarsRover.detect_rocks");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final Keyword cNameDetect_rocksKeyword_0_0 = (Keyword)cNameAssignment_0.eContents().get(0);
		private final Keyword cNumber_of_rocksKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cNumber_of_rocksAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNumber_of_rocksINTTerminalRuleCall_2_0 = (RuleCall)cNumber_of_rocksAssignment_2.eContents().get(0);
		private final Keyword cAfter_examinatingKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cAfter_examinatingAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cAfter_examinatingAfter_actionParserRuleCall_4_0 = (RuleCall)cAfter_examinatingAssignment_4.eContents().get(0);
		
		//detect_rocks:
		//	name='detect_rocks'
		//	'number_of_rocks' number_of_rocks=INT
		//	'after_examinating' after_examinating=after_action;
		@Override public ParserRule getRule() { return rule; }
		
		//name='detect_rocks' 'number_of_rocks' number_of_rocks=INT 'after_examinating' after_examinating=after_action
		public Group getGroup() { return cGroup; }
		
		//name='detect_rocks'
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }
		
		//'detect_rocks'
		public Keyword getNameDetect_rocksKeyword_0_0() { return cNameDetect_rocksKeyword_0_0; }
		
		//'number_of_rocks'
		public Keyword getNumber_of_rocksKeyword_1() { return cNumber_of_rocksKeyword_1; }
		
		//number_of_rocks=INT
		public Assignment getNumber_of_rocksAssignment_2() { return cNumber_of_rocksAssignment_2; }
		
		//INT
		public RuleCall getNumber_of_rocksINTTerminalRuleCall_2_0() { return cNumber_of_rocksINTTerminalRuleCall_2_0; }
		
		//'after_examinating'
		public Keyword getAfter_examinatingKeyword_3() { return cAfter_examinatingKeyword_3; }
		
		//after_examinating=after_action
		public Assignment getAfter_examinatingAssignment_4() { return cAfter_examinatingAssignment_4; }
		
		//after_action
		public RuleCall getAfter_examinatingAfter_actionParserRuleCall_4_0() { return cAfter_examinatingAfter_actionParserRuleCall_4_0; }
	}
	public class Push_obstaclesElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.robotFinal.MarsRover.push_obstacles");
		private final Assignment cNameAssignment = (Assignment)rule.eContents().get(1);
		private final Keyword cNamePush_obstaclesKeyword_0 = (Keyword)cNameAssignment.eContents().get(0);
		
		//push_obstacles:
		//	name='push_obstacles';
		@Override public ParserRule getRule() { return rule; }
		
		//name='push_obstacles'
		public Assignment getNameAssignment() { return cNameAssignment; }
		
		//'push_obstacles'
		public Keyword getNamePush_obstaclesKeyword_0() { return cNamePush_obstaclesKeyword_0; }
	}
	public class After_actionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.robotFinal.MarsRover.after_action");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cActionAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final Alternatives cActionAlternatives_0_0 = (Alternatives)cActionAssignment_0.eContents().get(0);
		private final Keyword cActionStopKeyword_0_0_0 = (Keyword)cActionAlternatives_0_0.eContents().get(0);
		private final Keyword cActionContinueKeyword_0_0_1 = (Keyword)cActionAlternatives_0_0.eContents().get(1);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cIndicateKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cIndicateAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cIndicateIndicationParserRuleCall_1_1_0 = (RuleCall)cIndicateAssignment_1_1.eContents().get(0);
		
		//after_action:
		//	action=('stop' | 'continue') ('indicate' indicate+=indication*)?;
		@Override public ParserRule getRule() { return rule; }
		
		//action=('stop' | 'continue') ('indicate' indicate+=indication*)?
		public Group getGroup() { return cGroup; }
		
		//action=('stop' | 'continue')
		public Assignment getActionAssignment_0() { return cActionAssignment_0; }
		
		//('stop' | 'continue')
		public Alternatives getActionAlternatives_0_0() { return cActionAlternatives_0_0; }
		
		//'stop'
		public Keyword getActionStopKeyword_0_0_0() { return cActionStopKeyword_0_0_0; }
		
		//'continue'
		public Keyword getActionContinueKeyword_0_0_1() { return cActionContinueKeyword_0_0_1; }
		
		//('indicate' indicate+=indication*)?
		public Group getGroup_1() { return cGroup_1; }
		
		//'indicate'
		public Keyword getIndicateKeyword_1_0() { return cIndicateKeyword_1_0; }
		
		//indicate+=indication*
		public Assignment getIndicateAssignment_1_1() { return cIndicateAssignment_1_1; }
		
		//indication
		public RuleCall getIndicateIndicationParserRuleCall_1_1_0() { return cIndicateIndicationParserRuleCall_1_1_0; }
	}
	public class IndicationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.robotFinal.MarsRover.indication");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final Keyword cNameWithKeyword_0_0 = (Keyword)cNameAssignment_0.eContents().get(0);
		private final Assignment cTypeAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final Alternatives cTypeAlternatives_1_0 = (Alternatives)cTypeAssignment_1.eContents().get(0);
		private final RuleCall cTypeSoundParserRuleCall_1_0_0 = (RuleCall)cTypeAlternatives_1_0.eContents().get(0);
		private final RuleCall cTypeMessageParserRuleCall_1_0_1 = (RuleCall)cTypeAlternatives_1_0.eContents().get(1);
		private final RuleCall cTypeColor_indicationParserRuleCall_1_0_2 = (RuleCall)cTypeAlternatives_1_0.eContents().get(2);
		
		//indication:
		//	name='with'
		//	type=(sound | message | color_indication)?;
		@Override public ParserRule getRule() { return rule; }
		
		//name='with' type=(sound | message | color_indication)?
		public Group getGroup() { return cGroup; }
		
		//name='with'
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }
		
		//'with'
		public Keyword getNameWithKeyword_0_0() { return cNameWithKeyword_0_0; }
		
		//type=(sound | message | color_indication)?
		public Assignment getTypeAssignment_1() { return cTypeAssignment_1; }
		
		//(sound | message | color_indication)
		public Alternatives getTypeAlternatives_1_0() { return cTypeAlternatives_1_0; }
		
		//sound
		public RuleCall getTypeSoundParserRuleCall_1_0_0() { return cTypeSoundParserRuleCall_1_0_0; }
		
		//message
		public RuleCall getTypeMessageParserRuleCall_1_0_1() { return cTypeMessageParserRuleCall_1_0_1; }
		
		//color_indication
		public RuleCall getTypeColor_indicationParserRuleCall_1_0_2() { return cTypeColor_indicationParserRuleCall_1_0_2; }
	}
	public class SoundElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.robotFinal.MarsRover.sound");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final Keyword cNameSoundKeyword_0_0 = (Keyword)cNameAssignment_0.eContents().get(0);
		private final Keyword cDurationKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cDurationAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cDurationINTTerminalRuleCall_2_0 = (RuleCall)cDurationAssignment_2.eContents().get(0);
		private final Keyword cFrequencyKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cFrequencyAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cFrequencyINTTerminalRuleCall_4_0 = (RuleCall)cFrequencyAssignment_4.eContents().get(0);
		
		//sound:
		//	name='sound'
		//	'duration' duration=INT
		//	'frequency' frequency=INT;
		@Override public ParserRule getRule() { return rule; }
		
		//name='sound' 'duration' duration=INT 'frequency' frequency=INT
		public Group getGroup() { return cGroup; }
		
		//name='sound'
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }
		
		//'sound'
		public Keyword getNameSoundKeyword_0_0() { return cNameSoundKeyword_0_0; }
		
		//'duration'
		public Keyword getDurationKeyword_1() { return cDurationKeyword_1; }
		
		//duration=INT
		public Assignment getDurationAssignment_2() { return cDurationAssignment_2; }
		
		//INT
		public RuleCall getDurationINTTerminalRuleCall_2_0() { return cDurationINTTerminalRuleCall_2_0; }
		
		//'frequency'
		public Keyword getFrequencyKeyword_3() { return cFrequencyKeyword_3; }
		
		//frequency=INT
		public Assignment getFrequencyAssignment_4() { return cFrequencyAssignment_4; }
		
		//INT
		public RuleCall getFrequencyINTTerminalRuleCall_4_0() { return cFrequencyINTTerminalRuleCall_4_0; }
	}
	public class MessageElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.robotFinal.MarsRover.message");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final Keyword cNameMessageKeyword_0_0 = (Keyword)cNameAssignment_0.eContents().get(0);
		private final Assignment cMsgAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cMsgSTRINGTerminalRuleCall_1_0 = (RuleCall)cMsgAssignment_1.eContents().get(0);
		
		//message:
		//	name='message'
		//	msg=STRING;
		@Override public ParserRule getRule() { return rule; }
		
		//name='message' msg=STRING
		public Group getGroup() { return cGroup; }
		
		//name='message'
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }
		
		//'message'
		public Keyword getNameMessageKeyword_0_0() { return cNameMessageKeyword_0_0; }
		
		//msg=STRING
		public Assignment getMsgAssignment_1() { return cMsgAssignment_1; }
		
		//STRING
		public RuleCall getMsgSTRINGTerminalRuleCall_1_0() { return cMsgSTRINGTerminalRuleCall_1_0; }
	}
	public class Color_indicationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.robotFinal.MarsRover.color_indication");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final Keyword cNameColor_indicationKeyword_0_0 = (Keyword)cNameAssignment_0.eContents().get(0);
		private final Keyword cWith_colorKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cColorAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cColorLED_ColorEnumRuleCall_2_0 = (RuleCall)cColorAssignment_2.eContents().get(0);
		
		//color_indication:
		//	name='color_indication'
		//	'with_color' color=LED_Color;
		@Override public ParserRule getRule() { return rule; }
		
		//name='color_indication' 'with_color' color=LED_Color
		public Group getGroup() { return cGroup; }
		
		//name='color_indication'
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }
		
		//'color_indication'
		public Keyword getNameColor_indicationKeyword_0_0() { return cNameColor_indicationKeyword_0_0; }
		
		//'with_color'
		public Keyword getWith_colorKeyword_1() { return cWith_colorKeyword_1; }
		
		//color=LED_Color
		public Assignment getColorAssignment_2() { return cColorAssignment_2; }
		
		//LED_Color
		public RuleCall getColorLED_ColorEnumRuleCall_2_0() { return cColorLED_ColorEnumRuleCall_2_0; }
	}
	public class ParkElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.robotFinal.MarsRover.park");
		private final Assignment cNameAssignment = (Assignment)rule.eContents().get(1);
		private final Keyword cNameParkKeyword_0 = (Keyword)cNameAssignment.eContents().get(0);
		
		//park:
		//	name='park';
		@Override public ParserRule getRule() { return rule; }
		
		//name='park'
		public Assignment getNameAssignment() { return cNameAssignment; }
		
		//'park'
		public Keyword getNameParkKeyword_0() { return cNameParkKeyword_0; }
	}
	public class Avoid_lakesElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.robotFinal.MarsRover.avoid_lakes");
		private final Assignment cNameAssignment = (Assignment)rule.eContents().get(1);
		private final Keyword cNameAvoid_lakesKeyword_0 = (Keyword)cNameAssignment.eContents().get(0);
		
		//avoid_lakes:
		//	name='avoid_lakes';
		@Override public ParserRule getRule() { return rule; }
		
		//name='avoid_lakes'
		public Assignment getNameAssignment() { return cNameAssignment; }
		
		//'avoid_lakes'
		public Keyword getNameAvoid_lakesKeyword_0() { return cNameAvoid_lakesKeyword_0; }
	}
	
	public class ColorElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.robotFinal.MarsRover.Color");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cCOLOR_REDEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cCOLOR_REDRedKeyword_0_0 = (Keyword)cCOLOR_REDEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cCOLOR_BLUEEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cCOLOR_BLUEBlueKeyword_1_0 = (Keyword)cCOLOR_BLUEEnumLiteralDeclaration_1.eContents().get(0);
		private final EnumLiteralDeclaration cCOLOR_GREENEnumLiteralDeclaration_2 = (EnumLiteralDeclaration)cAlternatives.eContents().get(2);
		private final Keyword cCOLOR_GREENGreenKeyword_2_0 = (Keyword)cCOLOR_GREENEnumLiteralDeclaration_2.eContents().get(0);
		private final EnumLiteralDeclaration cCOLOR_ORANGEEnumLiteralDeclaration_3 = (EnumLiteralDeclaration)cAlternatives.eContents().get(3);
		private final Keyword cCOLOR_ORANGEOrangeKeyword_3_0 = (Keyword)cCOLOR_ORANGEEnumLiteralDeclaration_3.eContents().get(0);
		private final EnumLiteralDeclaration cCOLOR_WHITEEnumLiteralDeclaration_4 = (EnumLiteralDeclaration)cAlternatives.eContents().get(4);
		private final Keyword cCOLOR_WHITEWhiteKeyword_4_0 = (Keyword)cCOLOR_WHITEEnumLiteralDeclaration_4.eContents().get(0);
		private final EnumLiteralDeclaration cCOLOR_BLACKEnumLiteralDeclaration_5 = (EnumLiteralDeclaration)cAlternatives.eContents().get(5);
		private final Keyword cCOLOR_BLACKBlackKeyword_5_0 = (Keyword)cCOLOR_BLACKEnumLiteralDeclaration_5.eContents().get(0);
		private final EnumLiteralDeclaration cCOLOR_OFFEnumLiteralDeclaration_6 = (EnumLiteralDeclaration)cAlternatives.eContents().get(6);
		private final Keyword cCOLOR_OFFOffKeyword_6_0 = (Keyword)cCOLOR_OFFEnumLiteralDeclaration_6.eContents().get(0);
		
		//enum Color:
		//	COLOR_RED='red' |
		//	COLOR_BLUE='blue' |
		//	COLOR_GREEN='green' |
		//	COLOR_ORANGE='orange' |
		//	COLOR_WHITE='white' |
		//	COLOR_BLACK='black' |
		//	COLOR_OFF='off';
		public EnumRule getRule() { return rule; }
		
		//COLOR_RED='red' | COLOR_BLUE='blue' | COLOR_GREEN='green' | COLOR_ORANGE='orange' | COLOR_WHITE='white' |
		//COLOR_BLACK='black' | COLOR_OFF='off'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//COLOR_RED='red'
		public EnumLiteralDeclaration getCOLOR_REDEnumLiteralDeclaration_0() { return cCOLOR_REDEnumLiteralDeclaration_0; }
		
		//'red'
		public Keyword getCOLOR_REDRedKeyword_0_0() { return cCOLOR_REDRedKeyword_0_0; }
		
		//COLOR_BLUE='blue'
		public EnumLiteralDeclaration getCOLOR_BLUEEnumLiteralDeclaration_1() { return cCOLOR_BLUEEnumLiteralDeclaration_1; }
		
		//'blue'
		public Keyword getCOLOR_BLUEBlueKeyword_1_0() { return cCOLOR_BLUEBlueKeyword_1_0; }
		
		//COLOR_GREEN='green'
		public EnumLiteralDeclaration getCOLOR_GREENEnumLiteralDeclaration_2() { return cCOLOR_GREENEnumLiteralDeclaration_2; }
		
		//'green'
		public Keyword getCOLOR_GREENGreenKeyword_2_0() { return cCOLOR_GREENGreenKeyword_2_0; }
		
		//COLOR_ORANGE='orange'
		public EnumLiteralDeclaration getCOLOR_ORANGEEnumLiteralDeclaration_3() { return cCOLOR_ORANGEEnumLiteralDeclaration_3; }
		
		//'orange'
		public Keyword getCOLOR_ORANGEOrangeKeyword_3_0() { return cCOLOR_ORANGEOrangeKeyword_3_0; }
		
		//COLOR_WHITE='white'
		public EnumLiteralDeclaration getCOLOR_WHITEEnumLiteralDeclaration_4() { return cCOLOR_WHITEEnumLiteralDeclaration_4; }
		
		//'white'
		public Keyword getCOLOR_WHITEWhiteKeyword_4_0() { return cCOLOR_WHITEWhiteKeyword_4_0; }
		
		//COLOR_BLACK='black'
		public EnumLiteralDeclaration getCOLOR_BLACKEnumLiteralDeclaration_5() { return cCOLOR_BLACKEnumLiteralDeclaration_5; }
		
		//'black'
		public Keyword getCOLOR_BLACKBlackKeyword_5_0() { return cCOLOR_BLACKBlackKeyword_5_0; }
		
		//COLOR_OFF='off'
		public EnumLiteralDeclaration getCOLOR_OFFEnumLiteralDeclaration_6() { return cCOLOR_OFFEnumLiteralDeclaration_6; }
		
		//'off'
		public Keyword getCOLOR_OFFOffKeyword_6_0() { return cCOLOR_OFFOffKeyword_6_0; }
	}
	public class LED_ColorElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.robotFinal.MarsRover.LED_Color");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cLED_ORANGEEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cLED_ORANGEOrangeKeyword_0_0 = (Keyword)cLED_ORANGEEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cLED_REDEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cLED_REDRedKeyword_1_0 = (Keyword)cLED_REDEnumLiteralDeclaration_1.eContents().get(0);
		private final EnumLiteralDeclaration cLED_GREENEnumLiteralDeclaration_2 = (EnumLiteralDeclaration)cAlternatives.eContents().get(2);
		private final Keyword cLED_GREENGreenKeyword_2_0 = (Keyword)cLED_GREENEnumLiteralDeclaration_2.eContents().get(0);
		private final EnumLiteralDeclaration cLED_OFFEnumLiteralDeclaration_3 = (EnumLiteralDeclaration)cAlternatives.eContents().get(3);
		private final Keyword cLED_OFFOffKeyword_3_0 = (Keyword)cLED_OFFEnumLiteralDeclaration_3.eContents().get(0);
		
		//enum LED_Color:
		//	LED_ORANGE='orange' |
		//	LED_RED='red' |
		//	LED_GREEN='green' |
		//	LED_OFF='off';
		public EnumRule getRule() { return rule; }
		
		//LED_ORANGE='orange' | LED_RED='red' | LED_GREEN='green' | LED_OFF='off'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//LED_ORANGE='orange'
		public EnumLiteralDeclaration getLED_ORANGEEnumLiteralDeclaration_0() { return cLED_ORANGEEnumLiteralDeclaration_0; }
		
		//'orange'
		public Keyword getLED_ORANGEOrangeKeyword_0_0() { return cLED_ORANGEOrangeKeyword_0_0; }
		
		//LED_RED='red'
		public EnumLiteralDeclaration getLED_REDEnumLiteralDeclaration_1() { return cLED_REDEnumLiteralDeclaration_1; }
		
		//'red'
		public Keyword getLED_REDRedKeyword_1_0() { return cLED_REDRedKeyword_1_0; }
		
		//LED_GREEN='green'
		public EnumLiteralDeclaration getLED_GREENEnumLiteralDeclaration_2() { return cLED_GREENEnumLiteralDeclaration_2; }
		
		//'green'
		public Keyword getLED_GREENGreenKeyword_2_0() { return cLED_GREENGreenKeyword_2_0; }
		
		//LED_OFF='off'
		public EnumLiteralDeclaration getLED_OFFEnumLiteralDeclaration_3() { return cLED_OFFEnumLiteralDeclaration_3; }
		
		//'off'
		public Keyword getLED_OFFOffKeyword_3_0() { return cLED_OFFOffKeyword_3_0; }
	}
	
	private final RobotElements pRobot;
	private final MissionElements pMission;
	private final Avoid_obstaclesElements pAvoid_obstacles;
	private final UltraElements pUltra;
	private final BumpersElements pBumpers;
	private final Detect_lakesElements pDetect_lakes;
	private final Detect_rocksElements pDetect_rocks;
	private final Push_obstaclesElements pPush_obstacles;
	private final After_actionElements pAfter_action;
	private final IndicationElements pIndication;
	private final SoundElements pSound;
	private final MessageElements pMessage;
	private final Color_indicationElements pColor_indication;
	private final ParkElements pPark;
	private final ColorElements eColor;
	private final LED_ColorElements eLED_Color;
	private final Avoid_lakesElements pAvoid_lakes;
	
	private final Grammar grammar;
	
	private final TerminalsGrammarAccess gaTerminals;

	@Inject
	public MarsRoverGrammarAccess(GrammarProvider grammarProvider,
			TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
		this.pRobot = new RobotElements();
		this.pMission = new MissionElements();
		this.pAvoid_obstacles = new Avoid_obstaclesElements();
		this.pUltra = new UltraElements();
		this.pBumpers = new BumpersElements();
		this.pDetect_lakes = new Detect_lakesElements();
		this.pDetect_rocks = new Detect_rocksElements();
		this.pPush_obstacles = new Push_obstaclesElements();
		this.pAfter_action = new After_actionElements();
		this.pIndication = new IndicationElements();
		this.pSound = new SoundElements();
		this.pMessage = new MessageElements();
		this.pColor_indication = new Color_indicationElements();
		this.pPark = new ParkElements();
		this.eColor = new ColorElements();
		this.eLED_Color = new LED_ColorElements();
		this.pAvoid_lakes = new Avoid_lakesElements();
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("org.xtext.robotFinal.MarsRover".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	
	
	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//Robot:
	//	'Robot'
	//	name=STRING
	//	'slave_address' slave_address=STRING
	//	'drive_speed' drive_speed=INT
	//	'special_speed' special_speed=INT
	//	'missions' missions+=mission*;
	public RobotElements getRobotAccess() {
		return pRobot;
	}
	
	public ParserRule getRobotRule() {
		return getRobotAccess().getRule();
	}
	
	//mission:
	//	'mission'
	//	name=STRING
	//	'type' type=(avoid_obstacles | detect_lakes | avoid_lakes | push_obstacles | detect_rocks);
	public MissionElements getMissionAccess() {
		return pMission;
	}
	
	public ParserRule getMissionRule() {
		return getMissionAccess().getRule();
	}
	
	//avoid_obstacles:
	//	name='avoid_obstacles'
	//	'sensors' sensors+=(ultra | bumpers)*;
	public Avoid_obstaclesElements getAvoid_obstaclesAccess() {
		return pAvoid_obstacles;
	}
	
	public ParserRule getAvoid_obstaclesRule() {
		return getAvoid_obstaclesAccess().getRule();
	}
	
	//ultra:
	//	name='ultra'
	//	'distance' distance=INT;
	public UltraElements getUltraAccess() {
		return pUltra;
	}
	
	public ParserRule getUltraRule() {
		return getUltraAccess().getRule();
	}
	
	//bumpers:
	//	name='bumpers';
	public BumpersElements getBumpersAccess() {
		return pBumpers;
	}
	
	public ParserRule getBumpersRule() {
		return getBumpersAccess().getRule();
	}
	
	//detect_lakes:
	//	name='detect_lakes'
	//	'number_of_lakes' number_of_lakes=INT
	//	'lakes_colors' lakes_colors+=Color*
	//	'after_examinating' after_examinating=after_action;
	public Detect_lakesElements getDetect_lakesAccess() {
		return pDetect_lakes;
	}
	
	public ParserRule getDetect_lakesRule() {
		return getDetect_lakesAccess().getRule();
	}
	
	//detect_rocks:
	//	name='detect_rocks'
	//	'number_of_rocks' number_of_rocks=INT
	//	'after_examinating' after_examinating=after_action;
	public Detect_rocksElements getDetect_rocksAccess() {
		return pDetect_rocks;
	}
	
	public ParserRule getDetect_rocksRule() {
		return getDetect_rocksAccess().getRule();
	}
	
	//push_obstacles:
	//	name='push_obstacles';
	public Push_obstaclesElements getPush_obstaclesAccess() {
		return pPush_obstacles;
	}
	
	public ParserRule getPush_obstaclesRule() {
		return getPush_obstaclesAccess().getRule();
	}
	
	//after_action:
	//	action=('stop' | 'continue') ('indicate' indicate+=indication*)?;
	public After_actionElements getAfter_actionAccess() {
		return pAfter_action;
	}
	
	public ParserRule getAfter_actionRule() {
		return getAfter_actionAccess().getRule();
	}
	
	//indication:
	//	name='with'
	//	type=(sound | message | color_indication)?;
	public IndicationElements getIndicationAccess() {
		return pIndication;
	}
	
	public ParserRule getIndicationRule() {
		return getIndicationAccess().getRule();
	}
	
	//sound:
	//	name='sound'
	//	'duration' duration=INT
	//	'frequency' frequency=INT;
	public SoundElements getSoundAccess() {
		return pSound;
	}
	
	public ParserRule getSoundRule() {
		return getSoundAccess().getRule();
	}
	
	//message:
	//	name='message'
	//	msg=STRING;
	public MessageElements getMessageAccess() {
		return pMessage;
	}
	
	public ParserRule getMessageRule() {
		return getMessageAccess().getRule();
	}
	
	//color_indication:
	//	name='color_indication'
	//	'with_color' color=LED_Color;
	public Color_indicationElements getColor_indicationAccess() {
		return pColor_indication;
	}
	
	public ParserRule getColor_indicationRule() {
		return getColor_indicationAccess().getRule();
	}
	
	//park:
	//	name='park';
	public ParkElements getParkAccess() {
		return pPark;
	}
	
	public ParserRule getParkRule() {
		return getParkAccess().getRule();
	}
	
	//enum Color:
	//	COLOR_RED='red' |
	//	COLOR_BLUE='blue' |
	//	COLOR_GREEN='green' |
	//	COLOR_ORANGE='orange' |
	//	COLOR_WHITE='white' |
	//	COLOR_BLACK='black' |
	//	COLOR_OFF='off';
	public ColorElements getColorAccess() {
		return eColor;
	}
	
	public EnumRule getColorRule() {
		return getColorAccess().getRule();
	}
	
	//enum LED_Color:
	//	LED_ORANGE='orange' |
	//	LED_RED='red' |
	//	LED_GREEN='green' |
	//	LED_OFF='off';
	public LED_ColorElements getLED_ColorAccess() {
		return eLED_Color;
	}
	
	public EnumRule getLED_ColorRule() {
		return getLED_ColorAccess().getRule();
	}
	
	//avoid_lakes:
	//	name='avoid_lakes';
	public Avoid_lakesElements getAvoid_lakesAccess() {
		return pAvoid_lakes;
	}
	
	public ParserRule getAvoid_lakesRule() {
		return getAvoid_lakesAccess().getRule();
	}
	
	//terminal ID:
	//	'^'? ('a'..'z' | 'A'..'Z' | '_') ('a'..'z' | 'A'..'Z' | '_' | '0'..'9')*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	}
	
	//terminal INT returns ecore::EInt:
	//	'0'..'9'+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	}
	
	//terminal STRING:
	//	'"' ('\\' . | !('\\' | '"'))* '"' |
	//	"'" ('\\' . | !('\\' | "'"))* "'";
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	}
	
	//terminal ML_COMMENT:
	//	'/*'->'*/';
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	}
	
	//terminal SL_COMMENT:
	//	'//' !('\n' | '\r')* ('\r'? '\n')?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	}
	
	//terminal WS:
	//	' ' | '\t' | '\r' | '\n'+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	}
	
	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	}
}
