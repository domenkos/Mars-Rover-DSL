/**
 * generated by Xtext 2.12.0
 */
package org.xtext.robotFinal.marsRover.impl;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.EDataType;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;

import org.eclipse.emf.ecore.impl.EFactoryImpl;

import org.eclipse.emf.ecore.plugin.EcorePlugin;

import org.xtext.robotFinal.marsRover.*;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model <b>Factory</b>.
 * <!-- end-user-doc -->
 * @generated
 */
public class MarsRoverFactoryImpl extends EFactoryImpl implements MarsRoverFactory
{
  /**
   * Creates the default factory implementation.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public static MarsRoverFactory init()
  {
    try
    {
      MarsRoverFactory theMarsRoverFactory = (MarsRoverFactory)EPackage.Registry.INSTANCE.getEFactory(MarsRoverPackage.eNS_URI);
      if (theMarsRoverFactory != null)
      {
        return theMarsRoverFactory;
      }
    }
    catch (Exception exception)
    {
      EcorePlugin.INSTANCE.log(exception);
    }
    return new MarsRoverFactoryImpl();
  }

  /**
   * Creates an instance of the factory.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public MarsRoverFactoryImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EObject create(EClass eClass)
  {
    switch (eClass.getClassifierID())
    {
      case MarsRoverPackage.ROBOT: return createRobot();
      case MarsRoverPackage.MISSION: return createmission();
      case MarsRoverPackage.AVOID_OBSTACLES: return createavoid_obstacles();
      case MarsRoverPackage.ULTRA: return createultra();
      case MarsRoverPackage.BUMPERS: return createbumpers();
      case MarsRoverPackage.DETECT_LAKES: return createdetect_lakes();
      case MarsRoverPackage.DETECT_ROCKS: return createdetect_rocks();
      case MarsRoverPackage.PUSH_OBSTACLES: return createpush_obstacles();
      case MarsRoverPackage.AFTER_ACTION: return createafter_action();
      case MarsRoverPackage.INDICATION: return createindication();
      case MarsRoverPackage.SOUND: return createsound();
      case MarsRoverPackage.MESSAGE: return createmessage();
      case MarsRoverPackage.COLOR_INDICATION: return createcolor_indication();
      case MarsRoverPackage.PARK: return createpark();
      case MarsRoverPackage.AVOID_LAKES: return createavoid_lakes();
      default:
        throw new IllegalArgumentException("The class '" + eClass.getName() + "' is not a valid classifier");
    }
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object createFromString(EDataType eDataType, String initialValue)
  {
    switch (eDataType.getClassifierID())
    {
      case MarsRoverPackage.COLOR:
        return createColorFromString(eDataType, initialValue);
      case MarsRoverPackage.LED_COLOR:
        return createLED_ColorFromString(eDataType, initialValue);
      default:
        throw new IllegalArgumentException("The datatype '" + eDataType.getName() + "' is not a valid classifier");
    }
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String convertToString(EDataType eDataType, Object instanceValue)
  {
    switch (eDataType.getClassifierID())
    {
      case MarsRoverPackage.COLOR:
        return convertColorToString(eDataType, instanceValue);
      case MarsRoverPackage.LED_COLOR:
        return convertLED_ColorToString(eDataType, instanceValue);
      default:
        throw new IllegalArgumentException("The datatype '" + eDataType.getName() + "' is not a valid classifier");
    }
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Robot createRobot()
  {
    RobotImpl robot = new RobotImpl();
    return robot;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public mission createmission()
  {
    missionImpl mission = new missionImpl();
    return mission;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public avoid_obstacles createavoid_obstacles()
  {
    avoid_obstaclesImpl avoid_obstacles = new avoid_obstaclesImpl();
    return avoid_obstacles;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public ultra createultra()
  {
    ultraImpl ultra = new ultraImpl();
    return ultra;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public bumpers createbumpers()
  {
    bumpersImpl bumpers = new bumpersImpl();
    return bumpers;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public detect_lakes createdetect_lakes()
  {
    detect_lakesImpl detect_lakes = new detect_lakesImpl();
    return detect_lakes;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public detect_rocks createdetect_rocks()
  {
    detect_rocksImpl detect_rocks = new detect_rocksImpl();
    return detect_rocks;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public push_obstacles createpush_obstacles()
  {
    push_obstaclesImpl push_obstacles = new push_obstaclesImpl();
    return push_obstacles;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public after_action createafter_action()
  {
    after_actionImpl after_action = new after_actionImpl();
    return after_action;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public indication createindication()
  {
    indicationImpl indication = new indicationImpl();
    return indication;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public sound createsound()
  {
    soundImpl sound = new soundImpl();
    return sound;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public message createmessage()
  {
    messageImpl message = new messageImpl();
    return message;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public color_indication createcolor_indication()
  {
    color_indicationImpl color_indication = new color_indicationImpl();
    return color_indication;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public park createpark()
  {
    parkImpl park = new parkImpl();
    return park;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public avoid_lakes createavoid_lakes()
  {
    avoid_lakesImpl avoid_lakes = new avoid_lakesImpl();
    return avoid_lakes;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Color createColorFromString(EDataType eDataType, String initialValue)
  {
    Color result = Color.get(initialValue);
    if (result == null) throw new IllegalArgumentException("The value '" + initialValue + "' is not a valid enumerator of '" + eDataType.getName() + "'");
    return result;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public String convertColorToString(EDataType eDataType, Object instanceValue)
  {
    return instanceValue == null ? null : instanceValue.toString();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public LED_Color createLED_ColorFromString(EDataType eDataType, String initialValue)
  {
    LED_Color result = LED_Color.get(initialValue);
    if (result == null) throw new IllegalArgumentException("The value '" + initialValue + "' is not a valid enumerator of '" + eDataType.getName() + "'");
    return result;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public String convertLED_ColorToString(EDataType eDataType, Object instanceValue)
  {
    return instanceValue == null ? null : instanceValue.toString();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public MarsRoverPackage getMarsRoverPackage()
  {
    return (MarsRoverPackage)getEPackage();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @deprecated
   * @generated
   */
  @Deprecated
  public static MarsRoverPackage getPackage()
  {
    return MarsRoverPackage.eINSTANCE;
  }

} //MarsRoverFactoryImpl
