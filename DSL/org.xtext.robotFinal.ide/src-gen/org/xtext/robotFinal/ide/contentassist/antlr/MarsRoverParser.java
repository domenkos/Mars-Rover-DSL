/*
 * generated by Xtext 2.12.0
 */
package org.xtext.robotFinal.ide.contentassist.antlr;

import com.google.inject.Inject;
import java.util.HashMap;
import java.util.Map;
import org.eclipse.xtext.AbstractElement;
import org.eclipse.xtext.ide.editor.contentassist.antlr.AbstractContentAssistParser;
import org.xtext.robotFinal.ide.contentassist.antlr.internal.InternalMarsRoverParser;
import org.xtext.robotFinal.services.MarsRoverGrammarAccess;

public class MarsRoverParser extends AbstractContentAssistParser {

	@Inject
	private MarsRoverGrammarAccess grammarAccess;

	private Map<AbstractElement, String> nameMappings;

	@Override
	protected InternalMarsRoverParser createParser() {
		InternalMarsRoverParser result = new InternalMarsRoverParser(null);
		result.setGrammarAccess(grammarAccess);
		return result;
	}

	@Override
	protected String getRuleName(AbstractElement element) {
		if (nameMappings == null) {
			nameMappings = new HashMap<AbstractElement, String>() {
				private static final long serialVersionUID = 1L;
				{
					put(grammarAccess.getMissionAccess().getTypeAlternatives_3_0(), "rule__Mission__TypeAlternatives_3_0");
					put(grammarAccess.getAvoid_obstaclesAccess().getSensorsAlternatives_2_0(), "rule__Avoid_obstacles__SensorsAlternatives_2_0");
					put(grammarAccess.getAfter_actionAccess().getActionAlternatives_0_0(), "rule__After_action__ActionAlternatives_0_0");
					put(grammarAccess.getIndicationAccess().getTypeAlternatives_1_0(), "rule__Indication__TypeAlternatives_1_0");
					put(grammarAccess.getColorAccess().getAlternatives(), "rule__Color__Alternatives");
					put(grammarAccess.getLED_ColorAccess().getAlternatives(), "rule__LED_Color__Alternatives");
					put(grammarAccess.getRobotAccess().getGroup(), "rule__Robot__Group__0");
					put(grammarAccess.getMissionAccess().getGroup(), "rule__Mission__Group__0");
					put(grammarAccess.getAvoid_obstaclesAccess().getGroup(), "rule__Avoid_obstacles__Group__0");
					put(grammarAccess.getUltraAccess().getGroup(), "rule__Ultra__Group__0");
					put(grammarAccess.getDetect_lakesAccess().getGroup(), "rule__Detect_lakes__Group__0");
					put(grammarAccess.getDetect_rocksAccess().getGroup(), "rule__Detect_rocks__Group__0");
					put(grammarAccess.getAfter_actionAccess().getGroup(), "rule__After_action__Group__0");
					put(grammarAccess.getAfter_actionAccess().getGroup_1(), "rule__After_action__Group_1__0");
					put(grammarAccess.getIndicationAccess().getGroup(), "rule__Indication__Group__0");
					put(grammarAccess.getSoundAccess().getGroup(), "rule__Sound__Group__0");
					put(grammarAccess.getMessageAccess().getGroup(), "rule__Message__Group__0");
					put(grammarAccess.getColor_indicationAccess().getGroup(), "rule__Color_indication__Group__0");
					put(grammarAccess.getRobotAccess().getNameAssignment_1(), "rule__Robot__NameAssignment_1");
					put(grammarAccess.getRobotAccess().getSlave_addressAssignment_3(), "rule__Robot__Slave_addressAssignment_3");
					put(grammarAccess.getRobotAccess().getDrive_speedAssignment_5(), "rule__Robot__Drive_speedAssignment_5");
					put(grammarAccess.getRobotAccess().getSpecial_speedAssignment_7(), "rule__Robot__Special_speedAssignment_7");
					put(grammarAccess.getRobotAccess().getMissionsAssignment_9(), "rule__Robot__MissionsAssignment_9");
					put(grammarAccess.getMissionAccess().getNameAssignment_1(), "rule__Mission__NameAssignment_1");
					put(grammarAccess.getMissionAccess().getTypeAssignment_3(), "rule__Mission__TypeAssignment_3");
					put(grammarAccess.getAvoid_obstaclesAccess().getNameAssignment_0(), "rule__Avoid_obstacles__NameAssignment_0");
					put(grammarAccess.getAvoid_obstaclesAccess().getSensorsAssignment_2(), "rule__Avoid_obstacles__SensorsAssignment_2");
					put(grammarAccess.getUltraAccess().getNameAssignment_0(), "rule__Ultra__NameAssignment_0");
					put(grammarAccess.getUltraAccess().getDistanceAssignment_2(), "rule__Ultra__DistanceAssignment_2");
					put(grammarAccess.getBumpersAccess().getNameAssignment(), "rule__Bumpers__NameAssignment");
					put(grammarAccess.getDetect_lakesAccess().getNameAssignment_0(), "rule__Detect_lakes__NameAssignment_0");
					put(grammarAccess.getDetect_lakesAccess().getNumber_of_lakesAssignment_2(), "rule__Detect_lakes__Number_of_lakesAssignment_2");
					put(grammarAccess.getDetect_lakesAccess().getLakes_colorsAssignment_4(), "rule__Detect_lakes__Lakes_colorsAssignment_4");
					put(grammarAccess.getDetect_lakesAccess().getAfter_examinatingAssignment_6(), "rule__Detect_lakes__After_examinatingAssignment_6");
					put(grammarAccess.getDetect_rocksAccess().getNameAssignment_0(), "rule__Detect_rocks__NameAssignment_0");
					put(grammarAccess.getDetect_rocksAccess().getNumber_of_rocksAssignment_2(), "rule__Detect_rocks__Number_of_rocksAssignment_2");
					put(grammarAccess.getDetect_rocksAccess().getAfter_examinatingAssignment_4(), "rule__Detect_rocks__After_examinatingAssignment_4");
					put(grammarAccess.getPush_obstaclesAccess().getNameAssignment(), "rule__Push_obstacles__NameAssignment");
					put(grammarAccess.getAfter_actionAccess().getActionAssignment_0(), "rule__After_action__ActionAssignment_0");
					put(grammarAccess.getAfter_actionAccess().getIndicateAssignment_1_1(), "rule__After_action__IndicateAssignment_1_1");
					put(grammarAccess.getIndicationAccess().getNameAssignment_0(), "rule__Indication__NameAssignment_0");
					put(grammarAccess.getIndicationAccess().getTypeAssignment_1(), "rule__Indication__TypeAssignment_1");
					put(grammarAccess.getSoundAccess().getNameAssignment_0(), "rule__Sound__NameAssignment_0");
					put(grammarAccess.getSoundAccess().getDurationAssignment_2(), "rule__Sound__DurationAssignment_2");
					put(grammarAccess.getSoundAccess().getFrequencyAssignment_4(), "rule__Sound__FrequencyAssignment_4");
					put(grammarAccess.getMessageAccess().getNameAssignment_0(), "rule__Message__NameAssignment_0");
					put(grammarAccess.getMessageAccess().getMsgAssignment_1(), "rule__Message__MsgAssignment_1");
					put(grammarAccess.getColor_indicationAccess().getNameAssignment_0(), "rule__Color_indication__NameAssignment_0");
					put(grammarAccess.getColor_indicationAccess().getColorAssignment_2(), "rule__Color_indication__ColorAssignment_2");
					put(grammarAccess.getParkAccess().getNameAssignment(), "rule__Park__NameAssignment");
					put(grammarAccess.getAvoid_lakesAccess().getNameAssignment(), "rule__Avoid_lakes__NameAssignment");
				}
			};
		}
		return nameMappings.get(element);
	}
			
	@Override
	protected String[] getInitialHiddenTokens() {
		return new String[] { "RULE_WS", "RULE_ML_COMMENT", "RULE_SL_COMMENT" };
	}

	public MarsRoverGrammarAccess getGrammarAccess() {
		return this.grammarAccess;
	}

	public void setGrammarAccess(MarsRoverGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}
}
